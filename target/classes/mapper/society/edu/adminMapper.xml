<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- SEGroup 모집홍보 관리자 SQL -->
<mapper namespace="global.segroup.society.edu.admin.dao.SocietyEduAdminMapper">

	<!-- 관리자 등록 시작 -->
	<insert id="admin_insert" parameterType="Admin">	
		insert into
			COM_ADMIN_TB
			(
				admin_id
				,admin_pw
				,admin_nm
				,admin_project
				,admin_ins_id
				,admin_udt_id
			) values (
				#{admin_id}
				,#{admin_pw}
				,#{admin_nm}
				,#{admin_project}
				,#{admin_id}
				,#{admin_id}
			)
	</insert>
	<!-- 관리자 등록 종료 -->
	
	<!-- 관리자 정보 리스트 조회 시작 -->
	<select id="admin_info_list_select" resultType="Admin" parameterType="hashmap">
		SELECT * 
		FROM (
			SELECT  (@ROWNUM := @ROWNUM + 1) AS rn, A.* 
			FROM (
				SELECT
					admin_id
					,admin_pw
					,admin_nm
					,admin_grade
					,admin_state
					,admin_project
					,DATE_FORMAT(admin_expired_st, '%Y-%m-%d') as admin_expired_st
					,DATE_FORMAT(admin_expired_et, '%Y-%m-%d') as admin_expired_et
					,DATE_FORMAT(admin_ins_dt, '%Y-%m-%d %T') as admin_ins_dt
					,admin_ins_id
					,DATE_FORMAT(admin_udt_dt, '%Y-%m-%d %T') as admin_udt_dt
					,admin_udt_id
				FROM
				COM_ADMIN_TB
				, (SELECT @ROWNUM := 0) B 
				WHERE 1=1
				<!-- 검색조건 -->
				<if test="searchName != '' and searchName != null">
					and admin_nm like CONCAT('%', #{searchName} , '%')
				</if>
			) A
		    order by A.admin_id, A.admin_grade desc
		) C WHERE rn BETWEEN #{adminPager.pageBegin} AND #{adminPager.pageEnd}
	</select>
	<!-- 관리자 정보 리스트 조회 종료 -->

	<!-- 관리자 정보 리스트 count 검색 시작 -->
	<select id="admin_info_list_select_count" resultType="int" parameterType="hashmap">
		select
			count(*)
		from
			COM_ADMIN_TB
		<if test="searchName != null and searchName != ''">
		where
			admin_nm like concat('%',#{searchName},'%')
		</if>
	</select>
	<!-- 관리자 정보 리스트 count 검색 종료 -->
	
	<!-- 관리자 정보 수정 시작 -->
	<update id="admin_info_update" parameterType="Admin">
		update
			COM_ADMIN_TB
		set
			admin_grade = #{admin_grade}
			,admin_state = #{admin_state}
			,admin_project = #{admin_project}
			,admin_expired_st = #{admin_expired_st}
			,admin_expired_et = #{admin_expired_et}
			,admin_udt_dt = now()
			,admin_udt_id = #{admin_udt_id}
		where
			admin_id = #{admin_id}
	</update>
	<!-- 관리자 정보 수정 종료 -->

	<!-- 과정 개설 등록 시작 -->
	<insert id="curriculum_insert" parameterType="SEACurriculum">
		insert into
			EDU_CURRICULUM_TB
			(
                crc_class,
				crc_nm,
				crc_tp,
                crc_month,
				crc_days,
				crc_times,
				crc_pay,
				crc_intro,
				crc_ins_id,
				crc_ins_dt,
				crc_udt_id,
				crc_udt_dt
			)values(
                #{crc_class},
                #{crc_nm},
				#{crc_tp},
                #{crc_month},
                #{crc_days},
                #{crc_times},
				#{crc_pay},
                #{crc_intro},
				#{crc_ins_id},
				now(),
				#{crc_udt_id},
				now()
			)			
	</insert>
	<!-- 과정 개설 등록 종료 -->
	
	<!-- 가장 마지막에 insert한 테이블의 PK(SEQ)가져오기 시작; 2018. 9. 18. 김준영 -->
	<!-- 가장 마지막에 insert한 테이블의 PK(SEQ)가져오기 시작 -->
	
	<!-- 과정 개설 이미지 등록 시작; 2018. 9. 18. 김준영 -->
	<!-- <insert id="curriculum_img_insert" parameterType="SEACurImg">
		insert into
			EDU_CURRICULUM_IMG_TB
		(
			crc_seq,
			crc_img_saved,
			crc_img_origin,
			crc_img_ins_dt,
			crc_img_saved_file_ins_id,
			crc_img_udt_dt,
			crc_img_udt_id,
			crc_img_saved_file_od
		)values(
			#{crc_seq},
			#{crc_img_saved},
			#{crc_img_origin},
			now(),
			#{crc_img_saved_file_ins_id},
			now(),
			#{crc_img_udt_id},
			#{crc_img_saved_file_od}
		)
	</insert> -->
	<!-- 과정 개설 이미지 등록 끝 -->
	
	<!-- 과정 결제정보 등록  -->
	<select id="selectPayInfo" parameterType="string" resultType="hashmap">
	   select 
	             GISU_SEQ
				,PAY_CRC_START
				,PAY_CRC_END
				,PAY_CRC_AMOUNT
				,PAY_CRC_PAYORDER
				,PAY_INS_DT
				,PAY_INS_ID
				,PAY_UDT_DT
				,PAY_UDT_ID
				,PAY_CRC_SEQ
	   
	   from edu_curriculum_pay_tb
	   
	   where gisu_seq=#{gisu_seq}
	   
	   order by pay_crc_payorder asc
	
	</select>
	<!-- 과정 결제정보 검색종료  -->
	
	<!-- 기수별 결제정보 검색 시작 -->
	<select id="selectPayByGisu" parameterType="int" resultType="hashmap">
		SELECT
			*
		FROM
			edu_user_pay_tb a, edu_curriculum_pay_tb b
		WHERE
			a.pay_crc_seq = b.pay_crc_seq
		AND
			gisu_seq = #{gisu_seq}
	</select>
	<!-- 기수별 결제정보 검색 종료 -->
	
	<!-- 과정 결제정보 삭제  -->
	<delete id="payInfoDelete" parameterType="string">
	   delete
	   
	   from edu_curriculum_pay_tb
	   
	   where gisu_seq=#{gisu_seq}
	</delete>
	<!-- 과정 결제정보 삭제종료  -->
	
	<!-- 과정 결제정보 등록  -->
	<insert id="payInfoInsert" parameterType="java.util.List">
		insert into
			edu_curriculum_pay_tb
			(
				GISU_SEQ
				,PAY_CRC_START
				,PAY_CRC_END
				,PAY_CRC_AMOUNT
				,PAY_CRC_PAYORDER
				,PAY_INS_DT
				,PAY_INS_ID
				,PAY_UDT_DT
				,PAY_UDT_ID
			)values
			
			<foreach item="element" index="index" collection="list" open=" " separator="," close=" ">
			(
				#{element.seq}
				,#{element.pay_st}
				,#{element.pay_end}
				,#{element.amount}
				,#{element.pay_order}
				,now()
				,#{element.adminId}
				,now()
				,#{element.adminId}
			)
			</foreach>
	</insert>
	<!-- 과정 결제정보 등록 종료 -->
	
	<!-- 특정 과정 검색 시작 -->
	<select id="searchCurriculum" parameterType="int" resultType="SEACurriculum">
		select
			crc_seq,
            crc_class,
			crc_nm,
			crc_tp,
            crc_month,
            crc_days,
            crc_times,
			crc_pay,
			crc_per,
            crc_intro
		from
			EDU_CURRICULUM_TB
		where
			crc_seq = #{crc_seq}
	</select>
	<!-- 특정 과정 검색 종료 -->

	<!-- 특정 과정의 기수들 검색 시작 -->
	<select id="searchCurGisuList" parameterType="int" resultType="SEACurGisu">
		select
			gisu_seq,
			crc_seq,
			gisu_num,
            gisu_crc_class,
            gisu_crc_nm,
            gisu_crc_month,
            gisu_crc_days,
            gisu_crc_times,
			gisu_crc_pay,
			gisu_app_st,
			gisu_app_et,
			gisu_crc_st,
			gisu_crc_et,
			gisu_per
		from
			EDU_CURRICULUM_GISU_TB
		where
			crc_seq = #{crc_seq}
	</select>
	<!-- 특정 과정의 기수들 검색 종료 -->
	
	<!-- 특정 과정의 특정 기수 검색 시작 -->
	<select id="searchCurGisu" parameterType="int" resultType="SEACurGisu">
		select
			*
		from
			EDU_CURRICULUM_GISU_TB
		where
			gisu_seq = #{gisu_seq}
	</select>
	<!-- 특정 과정의 특정 기수 검색 종료 -->
	
	<!-- 전체 과정 count 검색 시작 -->
	<select id="searchCurriculumAllCount" resultType="int">
		select
			count(*)
		from
			EDU_CURRICULUM_TB
	</select>
	<!-- 전체 과정 count 검색 종료 -->
	
	<!-- 전체 과정 검색 시작 -->
	<select id="searchCurriculumAll" parameterType="hashmap" resultType="SEACurriculum">
		SELECT * 
		FROM (
			SELECT  (@ROWNUM := @ROWNUM + 1) AS rn, A.* 
			FROM (
				SELECT
					crc_seq,
                    crc_class,
					crc_nm,
					crc_tp,
                    crc_month,
                    crc_days,
                    crc_times,
					crc_pay,
					crc_per
				FROM
				EDU_CURRICULUM_TB
				, (SELECT @ROWNUM := 0) B 
				WHERE 1=1
				<!-- 검색조건 -->
				<if test="searchName != '' and searchName != null">
					and crc_nm like CONCAT('%', #{searchName} , '%')
				</if>
			) A
		    order by CAST(A.crc_seq AS INTEGER) desc
		) C WHERE rn BETWEEN #{adminPager.pageBegin} AND #{adminPager.pageEnd}
	</select>
	<!-- 전체 과정 검색 종료 -->
	
	<!-- 승인된 과정들 검색 시작 -->
	<select id="searchCurriculumPermission" resultType="SEACurriculum">
		select
			crc_seq,
			crc_class,
			crc_nm,
			crc_tp,
            crc_month,
            crc_days,
            crc_times,
			crc_pay,
			crc_per
		from
			EDU_CURRICULUM_TB
		where
			crc_per = 'B1301'
	</select>
	<!-- 승인된 과정들 검색 종료 -->
	
	<!-- 전체 과정의 전체 기수 count 검색 시작 -->
	<select id="searchCurriculumGisuAllCount" resultType="int">
		select
			count(*)
		from
			EDU_CURRICULUM_GISU_TB
		<if test="searchName != null and searchName != ''">
		where
			gisu_crc_nm like concat('%',#{searchName},'%')
		</if>
	</select>
	<!-- 전체 과정의 전체 기수 count 검색 종료 -->
	
	<!-- 전체 과정의 전체 기수들 검색 시작 -->
	<select id="searchCurriculumGisuAll" parameterType="hashmap" resultType="SEACurGisu">
		SELECT * 
		FROM (
			SELECT  (@ROWNUM := @ROWNUM + 1) AS rn, A.* 
			FROM (
				SELECT
					gisu_seq,
					crc_seq,
					gisu_num,
                    gisu_crc_class,
                    gisu_crc_nm,
                    gisu_crc_month,
                    gisu_crc_days,
                    gisu_crc_times,
					gisu_crc_pay,
					gisu_app_st,
					gisu_app_et,
					gisu_crc_st,
					gisu_crc_et,
					gisu_per
				from
					EDU_CURRICULUM_GISU_TB
				<!-- 검색조건 -->
				where 1=1
				<if test="searchName != '' and searchName != null">
					and gisu_crc_nm like CONCAT('%', #{searchName} , '%')
				</if>
			) A, (SELECT @ROWNUM := 0) B 
			<if test="orderType == 'gisu'">
				<if test="orderValue == 'desc'">
					order by CAST(A.gisu_seq AS INTEGER) desc
				</if>
				<if test="orderValue == 'asc'">
					order by CAST(A.gisu_seq AS INTEGER) asc
				</if>
			</if>
			<if test="orderType == 'apply_date'">
				<if test="orderValue == 'desc'">
					order by A.gisu_app_st desc
				</if>
				<if test="orderValue == 'asc'">
					order by A.gisu_app_st asc
				</if>
			</if>
			<if test="orderType == 'gisu_per'">
				<if test="orderValue == 'desc'">
					order by A.gisu_per desc
				</if>
				<if test="orderValue == 'asc'">
					order by A.gisu_per asc
				</if>
			</if>
			
		) C WHERE rn BETWEEN #{adminPager.pageBegin} AND #{adminPager.pageEnd}
	</select>
	<!-- 전체 과정의 전체 기수들 검색 종료 -->
	
	<!-- 특정 과정 수정 시작 -->
	<update id="curriculum_update" parameterType="SEACurriculum">
		update
			EDU_CURRICULUM_TB
		set
            crc_class = #{crc_class},
            crc_nm = #{crc_nm},
			crc_tp = #{crc_tp},
            crc_month = #{crc_month},
            crc_days = #{crc_days},
            crc_times = #{crc_times},
			crc_pay = #{crc_pay},
<!-- 			crc_per = #{crc_per}, -->
            crc_intro = #{crc_intro},
			crc_udt_id = #{crc_udt_id},
			crc_udt_dt = now()
		where
			crc_seq = #{crc_seq}
	</update>
	<!-- 특정 과정 수정 종료 -->
	
	<!-- 특정 과정 승인 수정 시작 -->
	<update id="curriculum_permission_update" parameterType="SEACurriculum">
		update
			EDU_CURRICULUM_TB
		set
			crc_per = #{crc_per},
			crc_udt_id = #{crc_udt_id},
			crc_udt_dt = now()
		where
			crc_seq = #{crc_seq}
	</update>
	<!-- 특정 과정 승인 수정 종료 -->
	
	<!-- 기수 정보 등록 시작 -->
	<!-- 2018.09.18 신동철  -->
	<!-- <insert id="curriculum_gisu_insert" parameterType="SEACurGisu">
		<selectKey resultType="int" keyProperty="gisu_seq">
			select last_insert_id()
		</selectKey>
		insert into
			EDU_CURRICULUM_GISU_TB
			(
				crc_seq,
				gisu_num,
                gisu_crc_class,
                gisu_crc_nm,
                gisu_crc_month,
                gisu_crc_days,
                gisu_crc_times,
                gisu_crc_pay,
                gisu_crc_personnel,
                gisu_crc_location,
				gisu_app_st,
				gisu_app_et,
				gisu_crc_st,
                gisu_crc_et,
                gisu_crc_intro,
                gisu_crc_mainimg_saved,
                gisu_crc_mainimg_origin,
				gisu_ins_dt,
				gisu_ins_id,
				gisu_udt_dt,
				gisu_udt_id,
				gisu_img_eps
			)values(
				#{crc_seq},
				#{gisu_num},
                #{gisu_crc_class},
				#{gisu_crc_nm},
                #{gisu_crc_month},
                #{gisu_crc_days},
                #{gisu_crc_times},
                #{gisu_crc_pay},
                #{gisu_crc_personnel},
                #{gisu_crc_location},
                #{gisu_app_st},
                #{gisu_app_et},
                #{gisu_crc_st},
                #{gisu_crc_et},
                #{gisu_crc_intro},
                #{gisu_crc_mainimg_saved},
                #{gisu_crc_mainimg_origin},
				now(),
				#{gisu_ins_id},
				now(),
				#{gisu_udt_id},
				#{gisu_img_eps}
			)
	</insert> -->
	<!-- 기수 정보 등록 종료 -->
	
	<!-- 기수 정보 이미지 등록 시작 -->
	<!-- 2018.09.18 신동철  -->
	<insert id="curriculum_gisu_img_insert" parameterType="java.util.ArrayList">
		insert into
			EDU_CURRICULUM_GISU_IMG_TB
			(
				gisu_seq,
                gisu_crc_img_saved,
                gisu_crc_img_origin,
                gisu_crc_img_ins_dt,
                gisu_crc_img_saved_file_ins_id,
                gisu_crc_img_udt_dt,
                gisu_crc_img_udt_id,
                gisu_crc_img_saved_file_od
			)values
			<foreach item="element" index="index" collection="list" open=" " separator="," close=" ">
			(
				#{element.gisu_seq},
                #{element.gisu_crc_img_saved},
                #{element.gisu_crc_img_origin},
                now(),
                #{element.gisu_crc_img_saved_file_ins_id},
                now(),
                #{element.gisu_crc_img_udt_id},
                #{element.gisu_crc_img_saved_file_od}
			)
			</foreach>
	</insert>
	<!-- 기수 정보 이미지 등록 종료 -->
	
	<!-- 특정 기수 과정의 이미지 검색 시작 -->
	<!-- 2018.09.28 신동철 -->
	<select id="searchCurGisuImgList" parameterType="int" resultType="SEACurGisuImg">
		select
			gisu_crc_img_seq,
			gisu_seq,
			gisu_crc_img_saved,
            gisu_crc_img_origin,
            gisu_crc_img_ins_dt,
            gisu_crc_img_saved_file_ins_id,
            gisu_crc_img_udt_dt,
            gisu_crc_img_udt_id,
			gisu_crc_img_saved_file_od
		from
			EDU_CURRICULUM_GISU_IMG_TB
		where
			gisu_seq = #{gisu_seq}
		order by gisu_crc_img_saved_file_od asc
	</select>
	<!-- 특정 기수 과정의 이미지 검색 종료 -->
	
	<!-- 기수 정보 등록 시작 -->
	<!-- 2018.09.18 신동철  -->
	<insert id="curriculum_gisu_insert" parameterType="SEACurGisu">	
		<selectKey resultType="int" keyProperty="gisu_seq">
			select last_insert_id()
		</selectKey>	
		insert into
			EDU_CURRICULUM_GISU_TB
			(
				crc_seq,
				gisu_num,
                gisu_crc_class,
                gisu_crc_nm,
                gisu_crc_month,
                gisu_crc_days,
                gisu_crc_times,
                gisu_crc_pay,
                gisu_crc_personnel,
                gisu_crc_location,
				gisu_app_st,
				gisu_app_et,
				gisu_crc_st,
                gisu_crc_et,
                gisu_crc_intro,
				gisu_ins_dt,
				gisu_ins_id,
				gisu_udt_dt,
				gisu_udt_id
			)values(
				#{crc_seq},
				#{gisu_num},
                #{gisu_crc_class},
				#{gisu_crc_nm},
                #{gisu_crc_month},
                #{gisu_crc_days},
                #{gisu_crc_times},
                #{gisu_crc_pay},
                #{gisu_crc_personnel},
                #{gisu_crc_location},
                #{gisu_app_st},
                #{gisu_app_et},
                #{gisu_crc_st},
                #{gisu_crc_et},
                #{gisu_crc_intro},
				now(),
				#{gisu_ins_id},
				now(),
				#{gisu_udt_id}
			)		
	</insert>
	<!-- 기수 정보 등록 종료 -->
	
	<!-- 기수 정보 수정 시작 -->
	<!-- 2018.09.18 신동철 -->
	<!-- <update id="curriculum_gisu_update" parameterType="SEACurGisu">
		update
			EDU_CURRICULUM_GISU_TB
		set
			gisu_num = #{gisu_num},
            gisu_crc_class = #{gisu_crc_class},
			gisu_crc_nm = #{gisu_crc_nm},
            gisu_crc_month = #{gisu_crc_month},
            gisu_crc_days = #{gisu_crc_days},
            gisu_crc_times = #{gisu_crc_times},
            gisu_crc_pay = #{gisu_crc_pay},
            gisu_crc_personnel = #{gisu_crc_personnel},
            gisu_crc_location = #{gisu_crc_location},
			gisu_app_st = #{gisu_app_st},
			gisu_app_et = #{gisu_app_et},
			gisu_crc_st = #{gisu_crc_st},
			gisu_crc_et = #{gisu_crc_et},
			gisu_crc_intro = #{gisu_crc_intro},
			gisu_crc_mainimg_saved = #{gisu_crc_mainimg_saved},
            gisu_crc_mainimg_origin = #{gisu_crc_mainimg_origin},           
			gisu_udt_dt = now()
			gisu_udt_id = #{gisu_udt_id},
			gisu_img_eps = #{gisu_img_eps}
		where
			gisu_seq = #{gisu_seq}
	</update> -->
	<!-- 기수 정보 수정 종료 -->
	
	<!-- 기수 정보 이미지 삭제 시작 -->
	<!-- 2018.09.18 신동철 -->
	<delete id="curriculum_gisu_img_delete" parameterType="SEACurGisuImg">
		delete
		from
			EDU_CURRICULUM_GISU_IMG_TB
		where
			gisu_crc_img_seq = #{gisu_crc_img_seq}
	</delete>
	<!-- 기수 정보 이미지 삭제 종료 -->
	
	<!-- 기수 정보 삭제 시작 -->
	<!-- 2018.09.18 신동철 -->
	<delete id="curriculum_gisu_delete" parameterType="int">
		delete
		from
			EDU_CURRICULUM_GISU_TB
		where
			gisu_seq = #{gisu_seq}
	</delete>
	<!-- 기수 정보 삭제 종료 -->
	
	<!-- 기수 정보 수정 시작 -->
	<!-- 2018.10.01 신동철 -->
	<update id="curriculum_gisu_update" parameterType="SEACurGisu">
		update
			EDU_CURRICULUM_GISU_TB
		set
			gisu_num = #{gisu_num},
            gisu_crc_class = #{gisu_crc_class},
			gisu_crc_nm = #{gisu_crc_nm},
            gisu_crc_month = #{gisu_crc_month},
            gisu_crc_days = #{gisu_crc_days},
            gisu_crc_times = #{gisu_crc_times},
            gisu_crc_pay = #{gisu_crc_pay},
            gisu_crc_personnel = #{gisu_crc_personnel},
            gisu_crc_location = #{gisu_crc_location},
			gisu_app_st = #{gisu_app_st},
			gisu_app_et = #{gisu_app_et},
			gisu_crc_st = #{gisu_crc_st},
			gisu_crc_et = #{gisu_crc_et},
            gisu_crc_intro = #{gisu_crc_intro},
			gisu_udt_id = #{gisu_udt_id},
			gisu_udt_dt = now()
		where
			gisu_seq = #{gisu_seq}
	</update>
	<!-- 기수 정보 수정 종료 -->
	
	<!-- 기수 정보 이미지 수정 시작 -->
	<!-- 2018.10.01 신동철 -->
	<update id="curriculum_gisu_img_update" parameterType="java.util.ArrayList">
		<foreach item="element" index="index" collection="list" open=" " separator=";" close=" ">
			update
				EDU_CURRICULUM_GISU_IMG_TB
			set			
		        gisu_crc_img_udt_dt = now()
		        ,gisu_crc_img_udt_id = #{element.gisu_crc_img_udt_id}
		        ,gisu_crc_img_saved_file_od = #{element.gisu_crc_img_saved_file_od}
				<if test= "element.gisu_crc_img_saved != null and element.gisu_crc_img_saved != '' ">
		        	,gisu_crc_img_saved = #{element.gisu_crc_img_saved}
				</if>
				<if test="element.gisu_crc_img_origin != null and element.gisu_crc_img_origin != '' ">
		       		,gisu_crc_img_origin = #{element.gisu_crc_img_origin}
				</if>
			where			
				gisu_crc_img_seq = #{element.gisu_crc_img_seq} and
				gisu_seq = #{element.gisu_seq}
		</foreach>
	</update>
	
	<!-- 기수 정보 노출 승인 수정 시작 -->
	<update id="curriculum_gisu_permission_update" parameterType="SEACurGisu">
		update
			EDU_CURRICULUM_GISU_TB
		set
			gisu_per = #{gisu_per},
			gisu_udt_id = #{gisu_udt_id},
			gisu_udt_dt = now()
		where
			gisu_seq = #{gisu_seq}
	</update>
	<!-- 기수 정보 노출 승인 수정 종료 -->
	
	<!-- 특정 과정에 개설된 기수의 지원자 여부 체크 시작 -->
	<select id="curriculum_apply_select" parameterType="int" resultType="int">
		select 
			count(*) 
		from 
			edu_masterapply_form_tb form,
		    edu_curriculum_gisu_tb gisu,
		    edu_curriculum_tb cur
		where
			cur.crc_seq = #{crc_seq}
		and
			cur.crc_seq = gisu.crc_seq
		and
			gisu.gisu_seq = form.gisu_seq
	</select>
	<!-- 특정 과정에 개설된 기수의 지원자 여부 체크 종료 -->
	
	<!-- 특정 기수에 지원자 여부 체크 시작 -->
	<select id="curriculum_gisu_apply_select" parameterType="int" resultType="int">
		select 
			count(*) 
		from 
			edu_masterapply_form_tb form,
			edu_curriculum_gisu_tb gisu
		where
			gisu.gisu_seq = form.gisu_seq
		and
			gisu.gisu_seq = #{gisu_seq}
	</select>
	<!-- 특정 기수에 지원자 여부 체크 종료 -->
	
	<!-- 특정 기수에 지원자 정보count 조회 시작 -->
	<select id="apply_manager_select_count" parameterType="hashmap" resultType="int">
		select
			count(*)
		from
			edu_masterapply_form_tb form,
			edu_masterapply_result_tb result,
		    edu_curriculum_gisu_tb gisu,
		    com_user_tb user
		where
			form.app_seq = result.app_seq
		and
			form.gisu_seq = gisu.gisu_seq
		and
			form.app_id = user.user_id
		<if test="gisu_seq != null and gisu_seq != 0">
		and
			form.gisu_seq = #{gisu_seq}
		</if>
		<if test="search_name != null and search_name != ''">
			and user.user_nm like CONCAT('%', #{search_name} , '%')
		</if>
		<!-- 2018/09/12 서류합격결과 조회 쿼리 추가 2018/09/12 원병호 추가 -->
		<if test="app_rt_doc != null and app_rt_doc != ''">
		and result.app_rt_doc = #{app_rt_doc}
		</if>
		<!-- 2018/09/12 서류합격결과 조회 쿼리 추가 2018/09/12 원병호 추가 -->
		<if test="app_rt_itv != null and app_rt_itv != ''">
		and result.app_rt_itv = #{app_rt_itv}
		</if>
	</select>
	<!-- 특정 기수에 지원자 정보count 조회 종료 -->
	
	<!-- 특정 기수에 지원자 정보 조회 시작 -->
	<select id="apply_manager_select" parameterType="hashmap" resultType="hashmap">
		SELECT * FROM (
			SELECT  (@ROWNUM := @ROWNUM + 1) AS rn, A.* FROM (
				select
					form.app_seq,
					form.gisu_seq,
					form.app_id,
					DATE_FORMAT(form.app_ins_dt, '%Y-%m-%d') as app_ins_dt,
					result.app_rt_seq,
				    result.app_rt_doc,
				    IFNULL(result.app_rt_doc_id,'') as app_rt_doc_id,
				    IFNULL(DATE_FORMAT(result.app_rt_doc_dt, '%Y-%m-%d'),'') as app_rt_doc_dt,
				    result.app_rt_itv,
				    IFNULL(result.app_rt_itv_id,'') as app_rt_itv_id,
				    IFNULL(DATE_FORMAT(result.app_rt_itv_dt, '%Y-%m-%d'),'') as app_rt_itv_dt,
				    gisu.gisu_crc_nm,
				    gisu.gisu_num,
				    user.user_nm,
				    user.user_phone,
				    user.user_email,
				    form.app_ins_dt AS org_app_ins_dt
				from
					edu_masterapply_form_tb form
					, edu_masterapply_result_tb result
				    , edu_curriculum_gisu_tb gisu
				    , com_user_tb user
				    , (SELECT @ROWNUM := 0) B 
				where
					form.app_seq = result.app_seq
				and
					form.gisu_seq = gisu.gisu_seq
				and
					form.app_id = user.user_id
				<if test="gisu_seq != null and gisu_seq != 0">
				and
					form.gisu_seq = #{gisu_seq}
				</if>
				<if test="search_name != null and search_name != ''">
				and user.user_nm like CONCAT('%', #{search_name} , '%')
				</if>
				<!-- 2018/09/12 서류합격결과 조회 쿼리 추가 2018/09/12 원병호 추가 -->
				<if test="app_rt_doc != null and app_rt_doc != ''">
				and result.app_rt_doc = #{app_rt_doc}
				</if>
				<!-- 2018/09/12 서류합격결과 조회 쿼리 추가 2018/09/12 원병호 추가 -->
				<if test="app_rt_itv != null and app_rt_itv != ''">
				and result.app_rt_itv = #{app_rt_itv}
				</if>
				) A
			<if test="orderType == 'apply_date'">
				<if test="orderValue == 'desc'">
					order by A.org_app_ins_dt desc
				</if>
				<if test="orderValue == 'asc'">
					order by A.org_app_ins_dt asc
				</if>
			</if>
			<!-- 지원자 관리 리스트 아이디로 정렬 쿼리 추가. 2018/09/12 신동철 -->
			<if test="orderType == 'apply_id'">
				<if test="orderValue == 'desc'">
					order by A.app_id desc
				</if>
				<if test="orderValue == 'asc'">
					order by A.app_id asc
				</if>
			</if>
			<!-- 지원자 관리 리스트 이름으로 정렬 쿼리 추가. 2018/09/12 신동철 -->
			<if test="orderType == 'apply_name'">
				<if test="orderValue == 'desc'">
					order by A.user_nm desc
				</if>
				<if test="orderValue == 'asc'">
					order by A.user_nm asc
				</if>
			</if>
			<if test="orderType != null and orderType == ''">
				order by A.org_app_ins_dt desc
			</if>
		) C 
		WHERE rn BETWEEN #{adminPager.pageBegin} AND #{adminPager.pageEnd}
	</select>
	<!-- 특정 기수에 지원자 정보 조회 종료 -->
	
	<select id="paid_manager_select_count" parameterType="hashmap" resultType="int">
		select 
			count(*)
		from
			edu_user_refund_tb e
		right join (
			select
				a.user_nm
				,a.user_id
				,a.user_phone
				,b.gisu_crc_nm
				,b.gisu_num
				,c.pay_crc_payorder
				,c.pay_crc_amount
				,d.pay_user_method
				,d.pay_user_status
				,d.pay_user_seq
			from
				com_user_tb a
				,edu_curriculum_gisu_tb b
				,edu_curriculum_pay_tb c
				,edu_user_pay_tb d
			where
				a.user_id=d.pay_user_id
				and
				b.gisu_seq=c.gisu_seq
				and
				c.pay_crc_seq=d.pay_crc_seq
				<if test="gisu_seq != null and gisu_seq != ''">
				and 
				b.gisu_seq=#{gisu_seq}
				</if>
				<if test="gisu_order != null and gisu_order != ''">
				and
				c.pay_crc_payorder=#{gisu_order}
				</if>
				<if test="name != null and name != ''">
				and 
				a.user_nm=#{name}
				</if>
			) t
		on 
			t.pay_user_seq = e.pay_user_seq
	</select>
	
	<!-- 특정 기수에 지원자 정보 조회 시작 -->
	<select id="paid_manager_select" parameterType="hashmap" resultType="hashmap">
		SELECT * FROM (
			SELECT  
				(@ROWNUM := @ROWNUM + 1) AS rn, data.* 
			FROM (
				select 
					t.*, e.pay_refund_status, e.pay_refund_seq
				from
					edu_user_refund_tb e
				right join (
					select
						a.user_nm
						,a.user_id
						,a.user_phone
						,b.gisu_crc_nm
						,b.gisu_num
						,c.pay_crc_payorder
						,c.pay_crc_amount
						,d.pay_user_method
						,d.pay_user_status
						,d.pay_user_seq
					from
						com_user_tb a
						,edu_curriculum_gisu_tb b
						,edu_curriculum_pay_tb c
						,edu_user_pay_tb d
					where
						a.user_id=d.pay_user_id
						and
						b.gisu_seq=c.gisu_seq
						and
						c.pay_crc_seq=d.pay_crc_seq
						<if test="gisu_seq != null and gisu_seq != ''">
						and 
						b.gisu_seq=#{gisu_seq}
						</if>
						<if test="gisu_order != null and gisu_order != ''">
						and
						c.pay_crc_payorder=#{gisu_order}
						</if>
						<if test="name != null and name != ''">
						and 
						a.user_nm=#{name}
						</if>
					) t
					on 
						t.pay_user_seq = e.pay_user_seq
				) data, (SELECT @ROWNUM := 0) page
			<if test="sort_param != null and sort_param != '' and sort_order != null and sort_order != ''">
				<if test="sort_param == 'gisu_num'">order by data.gisu_num</if>
				<if test="sort_param == 'pay_user_method'">order by data.pay_user_method</if>
				<if test="sort_param == 'pay_crc_amount'">order by data.pay_crc_amount</if>
				<if test="sort_param == 'pay_crc_payorder'">order by data.pay_crc_payorder</if>
				<if test="sort_param == 'pay_user_status'">order by data.pay_user_status</if>
				<if test="sort_order == 'desc'">order by desc</if>
			</if>
			<if test="sort_param == null">
				order by data.gisu_num asc
			</if>
		) total
		WHERE
			rn between ${adminPager.pageBegin} and ${adminPager.pageEnd}
				
	</select>
	<!-- 특정 기수에 지원자 정보 조회 종료 -->
	
	<!-- 특정 기수에 환불 신청자 정보 조회 시작 -->
	<select id="refund_manager_select" parameterType="hashmap" resultType="hashmap">
		 select
	  a.user_nm
	  ,a.user_id
	  ,a.user_phone
	  ,b.pay_product_name
	  ,b.gisu_seq
	  ,b.pay_crc_payorder
	  ,b.pay_crc_amount
	  ,b.pay_user_method
	  ,b.pay_refund_status
	  ,b.pay_refund_reason
	  ,b.pay_refund_memo
	  ,b.pay_refund_bank
	  ,b.pay_refund_accname
	  ,b.pay_refund_accnum
	  ,b.pay_refund_seq
	  
	 from
	 
	  com_user_tb a
	 ,edu_user_refund_tb b
	 
	 where
	 
	  a.user_id=b.pay_user_id
	  and
	  b.gisu_seq=#{gisu_seq}
	  and
	  b.pay_crc_payorder=#{gisu_order}
	</select>
	<!-- 특정 기수에 환불 신청자 정보 조회 종료 -->
	
	<!-- 특정 이름의 지원자 정보 조회 시작 -->
	<select id="paid_name_select" parameterType="hashmap" resultType="hashmap">
		 select
	  a.user_nm
	  ,a.user_id
	  ,a.user_phone
	  ,b.gisu_crc_nm
	  ,b.gisu_num
	  ,c.pay_crc_payorder
	  ,c.pay_amount
	  ,c.pay_user_method
	  ,c.pay_user_status
	  
	 from
	 
	  com_user_tb a
	 ,edu_curriculum_gisu_tb b
	 ,edu_curriculum_pay_tb c
	 
	 where
	 
	  a.user_id=d.pay_user_id
	  and
	  b.gisu_seq=c.gisu_seq
	  and
	  a.user_nm=#{name}
	</select>
	<!-- 특정 이름의 지원자 정보 조회 종료 -->
	
	<!-- 특정 기수에 환불 신청자 정보 조회 시작 -->
	<select id="refund_name_select" parameterType="hashmap" resultType="hashmap">
		 select
	  a.user_nm
	  ,a.user_id
	  ,a.user_phone
	  ,b.pay_product_name
	  ,b.gisu_seq
	  ,b.pay_crc_payorder
	  ,b.pay_crc_amount
	  ,b.pay_refund_status
	  ,b.pay_refund_reason
	  ,b.pay_refund_memo
	  ,b.pay_refund_bank
	  ,b.pay_refund_accname
	  ,b.pay_refund_accnum
	  ,b.pay_refund_seq

	 from
	 
	  com_user_tb a
	 ,edu_user_refund_tb b
	 
	 where
	 
	  a.user_id=b.pay_user_id
	  and
	  a.user_nm=#{name}
	</select>
	<!-- 특정 기수에 환불 신청자 정보 조회 종료 -->
	
	
	<!-- 분납 과정 검색 시작 -->
	<select id="searchCurriculumGisuOrder" parameterType="int" resultType="hashmap">
		select
			pay_crc_seq,
			pay_crc_payorder
		from
			edu_curriculum_pay_tb
		where
			gisu_seq = #{gisu_seq}
	</select>
	<!-- 분납 과정 검색 종료 -->
	
	
	<!-- 환불정보검색시작 -->
	<select id="searchCurriculumRefund" resultType="hashmap">
	
	select
	        a.PAY_REFUND_SEQ 
			,a.PAY_USER_SEQ
			,a.PAY_REFUND_STATUS 
			,a.PAY_REFUND_REQDT
			,a.PAY_REFUND_COMDT 
			,a.PAY_REFUND_ACCNAME 
			,a.PAY_REFUND_ACCNUM 
			,a.PAY_REFUND_REASON 
			,a.PAY_REFUND_MEMO 
			,a.PAY_REFUND_BANK 
			,a.PAY_INS_DT 
			,a.PAY_CRC_SEQ 
			,a.PAY_USER_ID 
			,a.PAY_ACCNAME
			,a.PAY_ACCNUM 
			,a.PAY_BANKNAME
			,a.PAY_USER_METHOD 
			,a.PAY_TID 
			,a.PAY_MOID 
			,a.PAY_PRODUCT_NAME 
			,b.USER_NM
			,a.PAY_CRC_PAYORDER
			,a.PAY_CRC_AMOUNT

	from
	        edu_user_refund_tb a
	        ,com_user_tb b
	        
	where 
	      a.pay_user_id=b.user_id
	order by a.PAY_REFUND_STATUS asc
	   
	   
	</select>
	<!-- 환불정보검색종료 -->
	
	<!-- 특정 지원자 합격 정보 수정 시작 -->
	<update id="eduApply_result_update" parameterType="SEAResult">
		update
			EDU_MASTERAPPLY_RESULT_TB
		set
			<if test="@global.segroup.util.Comparator@isNotEmpty(app_rt_doc)">
			app_rt_doc = #{app_rt_doc},
			app_rt_doc_id = #{app_rt_doc_id},
			app_rt_doc_dt = now()
			</if>
			<if test="@global.segroup.util.Comparator@isNotEmpty(app_rt_itv)">
			app_rt_itv = #{app_rt_itv},
			app_rt_itv_id = #{app_rt_itv_id},
			app_rt_itv_dt = now()
			</if>
		where
			app_rt_seq = #{app_rt_seq}
	</update>
	<!-- 특정 지원자 합격 정보 수정 종료 -->
	
	<!-- 관리자 게시판 전체 게시물 조회 시작  -->
	<!-- 2018. 9. 12  김준영, 정대영 -->
	<select id="board_search_all" parameterType="hashmap" resultType="BoardGroup">
		SELECT * 
		FROM (
			SELECT  (@ROWNUM := @ROWNUM + 1) AS rn, A.* 
			FROM (
				select
					board_seq,
					board_nm
				from
					com_board_group_tb
				<if test="search_division != null and search_division != '' and search_type != null and search_type != ''">
				WHERE
					board_gb = #{search_division}
				AND
					board_tp = #{search_type}
				</if>
			) A, (SELECT @ROWNUM := 0) B 
        		order by A.board_seq DESC
		) C WHERE rn BETWEEN #{adminPager.pageBegin} AND #{adminPager.pageEnd}
	</select>
	<!-- 관리자 게시판 전체 게시물 조회 종료  -->
	
	<!-- 관리자 게시판 전체 게시물 개수 조회 시작  -->
	<!-- 2018. 9. 13  정대영 -->
	<select id="board_search_all_count" parameterType="hashmap" resultType="int">
		SELECT
			count(*)
		FROM
			com_board_group_tb
		<if test="search_division != null and search_division != '' and search_type != null and search_type != ''">
		WHERE
			board_gb = #{search_division}
		AND
			board_tp = #{search_type}
		</if>
	</select>
	<!-- 관리자 게시판 전체 게시물 개수 조회 종료  -->
	
	<!-- 관리자 게시판 이름 검색 시작 -->
	<select id="board_name_search" parameterType="BoardGroup" resultType="BoardGroup">
		select
			board_seq,
			board_nm
		from
			com_board_group_tb
		where
			board_gb = #{board_gb}
		and
			board_tp = #{board_tp}
	</select>
	<!-- 관리자 게시판 이름 검색 종료 -->
	
	<!-- 관리자 게시판 게시판 구분, 타입 검색 시작 -->
	<select id="board_gb_search" parameterType="BoardGroup" resultType="BoardGroup">
		select
			board_seq,
			board_nm,
			board_gb,
			board_tp
		from
			com_board_group_tb
		where
			board_seq = #{board_seq}
	</select>
	<!-- 관리자 게시판 게시판 구분, 타입 검색 종료 -->
	
	<!-- 관리자 게시판 내용 검색 시작 -->
	<select id="board_contents_search" parameterType="hashmap" resultType="BoardContent">
		SELECT * 
		FROM (
			SELECT  (@ROWNUM := @ROWNUM + 1) AS rn, A.* 
			FROM (
				SELECT
					board_seq
					,board_content_seq
					,board_content_title
					,board_content_nm
					,board_content_hit
					,DATE_FORMAT(board_content_ins_dt, '%Y-%m-%d %T') as board_content_ins_dt
					,DATE_FORMAT(board_content_udt_dt, '%Y-%m-%d %T') as board_content_udt_dt
				FROM
					com_board_content_tb
				, (SELECT @ROWNUM := 0) B 
				WHERE
					board_seq = #{board_seq}
				<!-- 검색조건 -->
			) A
		    order by CAST(A.board_seq AS INTEGER) desc
		) C WHERE rn BETWEEN #{adminPager.pageBegin} AND #{adminPager.pageEnd}
	</select>
	<!-- 관리자 게시판 내용 검색 종료 -->
	
	<!-- 관리자 잡페어 공지사항 게시판 내용 검색 시작; 2019.1.23 신동철 -->
	<select id="company_board_contents_search" parameterType="hashmap" resultType="BoardContent">
		SELECT *	FROM (
			SELECT  (@ROWNUM := @ROWNUM + 1) AS rn, A.*
			FROM (
				SELECT
					content.board_seq
					,content.board_content_seq
					,content.board_content_title
					,content.board_content_nm
					,content.board_content_hit
					,DATE_FORMAT(content.board_content_ins_dt, '%Y-%m-%d') as board_content_ins_dt
					,DATE_FORMAT(content.board_content_udt_dt, '%Y-%m-%d') as board_content_udt_dt
					,groups.board_tp
					,groups.board_gb
				FROM
					com_board_content_tb content
					,com_board_group_tb groups
					,(SELECT @ROWNUM := 0) B 
				WHERE
					content.board_seq = #{board_seq}
					and groups.board_seq = content.board_seq
			) A
		    order by A.board_content_udt_dt desc limit 6
		) C 
		WHERE rn BETWEEN #{adminPager.pageBegin} AND #{adminPager.pageEnd}			
	</select>
	<!-- 관리자 잡페어 공지사항 게시판 내용 검색 종료 -->
	
	<!-- 관리자 잡페어 공지사항 게시판 리스트 검색 시작; 2019.1.24 신동철 -->
	<select id="company_board_contents_list_search" parameterType="hashmap" resultType="BoardContent">
		SELECT *	FROM (
			SELECT  (@ROWNUM := @ROWNUM + 1) AS rn, A.*
			FROM (
				SELECT
					content.board_seq
					,content.board_content_seq
					,content.board_content_title
					,content.board_content_nm
					,content.board_content_hit
					,DATE_FORMAT(content.board_content_ins_dt, '%Y-%m-%d') as board_content_ins_dt
					,DATE_FORMAT(content.board_content_udt_dt, '%Y-%m-%d') as board_content_udt_dt
					,groups.board_tp
					,groups.board_gb
				FROM
					com_board_content_tb content
					,com_board_group_tb groups
					,(SELECT @ROWNUM := 0) B 
				WHERE
					content.board_seq = #{board_seq}
					and groups.board_seq = content.board_seq
			) A
		    order by A.board_content_udt_dt desc
		) C 
		WHERE rn BETWEEN #{adminPager.pageBegin} AND #{adminPager.pageEnd}			
	</select>
	<!-- 관리자 잡페어 공지사항 게시판 리스트 검색 종료 -->
	
	<!-- 관리자 게시판 내용 count 조회 시작 -->
	<select id="board_contents_count" parameterType="hashmap" resultType="int">
		select
			count(*)
		from
			com_board_content_tb
		where
			board_seq = #{board_seq}
	</select>
	<!-- 관리자 게시판 count 조회 종료 -->
	
	<!-- 관리자 게시판 조회수 증가 시작 -->
	<update id="board_contents_hit_update" parameterType="int">
		update
			com_board_content_tb
		set
			board_content_hit = board_content_hit + 1
		where
			board_content_seq = #{board_content_seq}
	</update>	
	<!-- 관리자 게시판 조회수 증가 종료 -->
	
	<!-- 관리자 게시판 세부내용 검색 시작 -->
	<resultMap type="hashmap" id="boardContentMap">
		<id property="board_content_seq" column="board_content_seq" />
		<result property="board_seq" column="board_seq" />
		<result property="board_content_title" column="board_content_title" />
		<result property="board_content_ct" column="board_content_ct" />
		<result property="board_content_nm" column="board_content_nm" />
		<result property="board_content_hit" column="board_content_hit" />
		<result property="board_content_imp" column="board_content_imp" />
		<result property="board_content_udt_dt" column="board_content_udt_dt" />
		<collection property="fileList" javaType="java.util.ArrayList" resultMap="boardContentFile" />
	</resultMap>
	<resultMap type="hashmap" id="boardContentFile">
		<id property="board_file_seq" column="board_file_seq" />
		<result property="board_file_saved" column="board_file_saved" />
		<result property="board_file_origin" column="board_file_origin" />
	</resultMap>
	
	<select id="board_contents_detail" parameterType="int" resultMap="boardContentMap">
		select
			content.board_seq
			,content.board_content_seq
			,content.board_content_title
		    ,content.board_content_ct
			,content.board_content_nm
			,content.board_content_hit
			,content.board_content_imp
			,DATE_FORMAT(content.board_content_udt_dt, '%Y-%m-%d') as board_content_udt_dt
		    ,file.board_file_seq
		    ,file.board_file_saved
		    ,file.board_file_origin
		from
			com_board_content_tb content
		left join
			com_board_file_tb file
		on
			content.board_content_seq = file.board_content_seq
		where
			content.board_content_seq = #{board_content_seq}
	</select>
	<!-- 관리자 게시판 세부내용 검색 종료 -->
	
	<!-- 관리자 게시판 세부내용 등록 시작 -->
	<insert id="board_contents_insert" parameterType="BoardContent" useGeneratedKeys="true" keyProperty="board_content_seq">
		insert into
			com_board_content_tb
			(
				board_seq
				,board_content_title
				,board_content_ct
				,board_content_nm
				,board_content_hit
				,board_content_ins_dt
				,board_content_ins_id
				,board_content_udt_dt
				,board_content_udt_id
			)values(
				#{board_seq}
				,#{board_content_title}
				,#{board_content_ct}
				,#{board_content_nm}
				,#{board_content_hit}
				,now()
				,#{board_content_nm}
				,now()
				,#{board_content_nm}
			)
	</insert>
	<!-- 관리자 게시판 세부내용 등록 종료 -->
	
	<!-- 관리자 게시판 세부내용 수정 시작 -->
	<update id="board_contents_update" parameterType="BoardContent">
		update
			com_board_content_tb
		set
			board_content_title = #{board_content_title}
			,board_content_ct = #{board_content_ct}
			,board_content_udt_dt = now()
		where
			board_content_seq = #{board_content_seq}
	</update>
	<!-- 관리자 게시판 세부내용 수정 종료 -->
    
    <!-- 관리자 게시판 세부내용 삭제 시작 -->
    <update id="board_contents_delete" parameterType="int">
        delete from
            com_board_content_tb
        where
            board_content_seq = #{board_content_seq}
    </update>
    <!-- 관리자 게시판 세부내용 수정 종료 -->
	
	<!-- 관리자 게시판 세부내용 파일 삭제 시작 -->
	<delete id="board_contents_file_delete" parameterType="BoardContent">
		delete from
			com_board_file_tb
		where
			board_content_seq = #{board_content_seq}
	</delete>
	<!-- 관리자 게시판 세부내용 파일 삭제 종료 -->
	
	<!-- 관리자 게시판 세부내용 파일 등록 시작 -->
	<insert id="board_contents_file_insert" parameterType="hashmap">
		insert into
			com_board_file_tb
			(
				board_content_seq
				,board_file_saved
				,board_file_origin
				,board_file_ins_dt
				,board_file_ins_id
				,board_file_udt_dt
				,board_file_udt_id
			)values
			<foreach item="file" index="index" collection="list" open=" " separator="," close=" ">
			(
				#{board_content_seq}
				,#{file.board_file_saved}
				,#{file.board_file_origin}
				,now()
				,#{id}
				,now()
				,#{id}
			)
			</foreach>
	</insert>
	<!-- 관리자 게시판 세부내용 파일 등록 종료 -->
	
	<!-- 일반 회원(등급)의 전체 회원 정보 count 조회 시작 -->
	<select id="basic_user_select_all_count" parameterType="hashmap" resultType="int">
		select
			count(*)
		from
			COM_USER_TB
		where
			user_flag = 'A0100'
		and
			user_state = 'A0200'
		<if test="searchName != null and searchName != ''">
		and
			user_nm = #{searchName}
		</if>
		<if test="searchId != null and searchId != ''">
		and
			user_id = #{searchId}
		</if>
	</select>
	<!-- 일반 회원(등급)의 전체 회원 정보 count 조회 종료 -->
	
	<!-- 일반 회원(등급)의 전체 회원 정보 조회 시작 -->
	<select id="basic_user_select_all" parameterType="hashmap" resultType="User">
		SELECT * 
		FROM (
			SELECT  (@ROWNUM := @ROWNUM + 1) AS rn, A.* 
			FROM (
				select
					user_id
					, user_pw
					, user_nm
					, user_phone
					, user_email
					, user_birth
					, user_sex
					, user_flag
					, user_state
					, user_ins_dt
				from
					COM_USER_TB
				where
					user_flag = 'A0100'
				and
					user_state = 'A0200'
				<if test="searchName != null and searchName != ''">
				and
					user_nm = #{searchName}
				</if>
				<if test="searchId != null and searchId != ''">
				and
					user_id = #{searchId}
				</if>
			) A, (SELECT @ROWNUM := 0) B 
            <if test="orderType == ''">
            	order by A.user_ins_dt desc
            </if>
            <!-- 회원 관리의 리스트 항목에 아이디 , 이름 정렬 기준 추가_이재준 -->
            <if test="orderType == 'user_id'">
				<if test="orderValue == 'desc'">
					order by A.user_id desc
				</if>
				<if test="orderValue == 'asc'">
					order by A.user_id asc
				</if>
			</if>
			<if test="orderType == 'user_nm'">
				<if test="orderValue == 'desc'">
					order by A.user_nm desc
				</if>
				<if test="orderValue == 'asc'">
					order by A.user_nm asc
				</if>
			</if>
			<if test="orderType == 'user_birth'">
				<if test="orderValue == 'desc'">
					order by A.user_birth desc
				</if>
				<if test="orderValue == 'asc'">
					order by A.user_birth asc
				</if>
			</if>
			<if test="orderType == 'user_sex'">
				<if test="orderValue == 'desc'">
					order by A.user_sex desc
				</if>
				<if test="orderValue == 'asc'">
					order by A.user_sex asc
				</if>
			</if>
		) C WHERE rn BETWEEN #{adminPager.pageBegin} AND #{adminPager.pageEnd}
	</select>
	<!-- 일반 회원(등급)의 전체 회원 정보 조회 종료 -->

	<!-- 회원 정보 수정 시작 -->
	<update id="user_info_update" parameterType="User">
		update
			com_user_tb
		<if test="user_nm != '' or user_phone != '' or user_email != '' or user_birth != ''">
		<set>
			<if test="user_nm != ''">
			user_nm = #{user_nm},
			</if>
			<if test="user_phone != ''">
			user_phone = #{user_phone},
			</if>
			<if test="user_email != ''">
			user_email = #{user_email},
			</if>
			<if test="user_birth != ''">
			user_birth = #{user_birth},
			</if>
			<if test="user_sex != ''">
			user_sex = #{user_sex}
			</if>
		</set>
		</if>
		where
			user_id = #{user_id}
	</update>
	<!-- 회원 정보 수정 종료  -->
	
	<!-- 환불 신청자 인원수 조회 시작 -->
	<select id="refund_manager_list_count" parameterType="hashmap" resultType="int">
		select
			count(*)
		from
			com_user_tb a
			,edu_user_refund_tb b
		where
			a.user_id=b.pay_user_id
		<if test="gisu_seq != null and gisu_seq != '' and gisu_seq != 0">
			and
			b.gisu_seq=#{gisu_seq}
		</if>
		<if test="gisu_order != null and gisu_order != '' and gisu_order != 0">
			and
			b.pay_crc_payorder=#{gisu_order}
		</if>
		<if test="search_name != null and search_name != ''">
			and
			a.user_nm=#{search_name}
		</if>
	</select>
	<!-- 환불 신청자 인원수 조회 종료 -->
	
	
	<!-- 환불 신청자 정보 조회 시작 -->
	<select id="refund_manager_list" parameterType="hashmap" resultType="hashmap">
		SELECT * 
		FROM(
			SELECT  
				(@ROWNUM := @ROWNUM + 1) AS rn, data.* 
			FROM
				(
				select
					a.user_nm
					,a.user_id
					,a.user_phone
					,b.pay_product_name
					,b.gisu_seq
					,b.pay_crc_payorder
					,b.pay_crc_amount
					,b.pay_user_method
					,b.pay_user_seq
					,b.pay_refund_status
					,b.pay_refund_reason
					,b.pay_refund_memo
					,b.pay_refund_bank
					,b.pay_refund_accname
					,b.pay_refund_accnum
					,b.pay_refund_seq
					,b.pay_refund_reqdt
				from
					com_user_tb a
					,edu_user_refund_tb b
				where
					a.user_id=b.pay_user_id
				<if test="gisu_seq != null and gisu_seq != '' and gisu_seq != 0">
					and
					b.gisu_seq=#{gisu_seq}
				</if>
				<if test="gisu_order != null and gisu_order != ''">
					and
					b.pay_crc_payorder=#{gisu_order}
				</if>
				<if test="search_name != null and search_name != ''">
					and
					a.user_nm=#{search_name}
				</if>
				) data, (SELECT @ROWNUM := 0) page
				<if test="sort_param != null and sort_param != '' and sort_order != null and sort_order != ''">
					order by
						<if test="sort_param == 'pay_refund_status'">data.pay_refund_status</if>
						<if test="sort_param == 'pay_refund_reqdt'">data.pay_refund_reqdt</if>
						<if test="sort_param == 'pay_crc_amount'">data.pay_crc_amount</if>
						<if test="sort_param == 'pay_crc_payorder'">data.pay_crc_payorder</if>
						<if test="sort_param == 'gisu_seq'">data.gisu_seq</if>
						<if test="sort_order == 'desc'">desc</if>
				</if>
				<if test="sort_param == null">
					order by data.pay_refund_status
				</if>
		) total
		WHERE
			rn BETWEEN #{adminPager.pageBegin} AND #{adminPager.pageEnd}
	</select>
	<!-- 환불 신청자 정보 조회 종료 -->
	

	<!-- 환불 메모 수정 시작 -->
	<update id="refund_memo_update" parameterType="refundInfo">
		UPDATE 
			edu_user_refund_tb
		SET
			pay_refund_memo = #{memo}
		WHERE
			pay_refund_seq = #{seq}
	</update>
	<!-- 환불 메모 수정 종료 -->
	
	
	<!-- 환불 상태 변경 시작 -->
	<update id="refund_status_update" parameterType="refundInfo">
		UPDATE
			edu_user_refund_tb
		SET
			pay_refund_status = '1'
			,pay_refund_comdt = now()
			<if test="cshr_cancelnum != null">
			,pay_cshr_cancelnum=#{cshr_cancelnum}
			</if>
		WHERE
			pay_refund_seq = #{pay_refund_seq}
	</update>
	<!-- 환불 상태 변경 종료 -->
	
	<!-- 환불 seq로 환불받을 유저 Id 검색 시작 -->
	<select id="select_refund_user_id" parameterType="int" resultType="refundInfo">
		select
			PAY_USER_ID,
			PAY_TID, 
            PAY_MOID,
            PAY_USER_METHOD
		from
			edu_user_refund_tb
		where
			pay_refund_seq = #{pay_refund_seq}
	</select>
	<!-- 환불 seq로 환불받을 유저 Id 검색 종료 -->
	
	
	<!-- 결제 데이터 삭제 시작 -->
	<delete id="delete_pay_info" parameterType="int">
		DELETE FROM
			edu_user_pay_tb
		WHERE
			pay_user_seq = #{pay_user_seq}
	</delete>
	<!-- 결제 데이터 삭제 종료 -->
	
	<!-- 환불 테이블에 insert(임시) : 관리자가 강제로 환불처리 하는 경우 -->
	<insert id="insert_refund_temp" parameterType="int">
	INSERT INTO
		edu_user_refund_tb
	    (
	     PAY_USER_SEQ 
	     ,PAY_REFUND_STATUS 
	     ,PAY_REFUND_REQDT 
	     ,PAY_REFUND_ACCNAME 
	     ,PAY_REFUND_ACCNUM 
	     ,PAY_REFUND_BANK 
	     ,PAY_REFUND_REASON 
	     ,PAY_REFUND_MEMO
	     ,PAY_INS_DT
	     ,PAY_USER_ID
	     ,PAY_CRC_SEQ
	     ,PAY_USER_METHOD
	     ,PAY_MODULE_NAME
	     ,PAY_ACCNAME
	     ,PAY_ACCNUM
	     ,PAY_BANKNAME
	     ,PAY_TID
	     ,PAY_MOID
	     ,PAY_PRODUCT_NAME
	     ,PAY_RTN_DATA
	     ,PAY_CRC_AMOUNT
	     ,PAY_CRC_PAYORDER
	     ,GISU_SEQ
	    )
    VALUES
	    (
	    #{pay_user_seq}
	    ,'0'
	    ,NOW()
	    ,'수정해주세요'
	    ,'수정해주세요'
	    ,'수정해주세요'
	    ,'결제정보 변경으로 인하여 부득이하게 환불처리가 필요합니다. 양해 부탁드립니다.'
	    ,'결제정보 변경을 위한 관리자 임시 환불처리'
	    ,(SELECT PAY_INS_DT FROM edu_user_pay_tb WHERE pay_user_seq = #{pay_user_seq})
	    ,(SELECT PAY_USER_ID FROM edu_user_pay_tb WHERE pay_user_seq = #{pay_user_seq})
	    ,(SELECT PAY_CRC_SEQ FROM edu_user_pay_tb WHERE pay_user_seq = #{pay_user_seq})
	    ,(SELECT PAY_USER_METHOD FROM edu_user_pay_tb WHERE pay_user_seq = #{pay_user_seq})
	    ,(SELECT PAY_MODULE_NAME FROM edu_user_pay_tb WHERE pay_user_seq = #{pay_user_seq})
	    ,(SELECT PAY_ACCNAME FROM edu_user_pay_tb WHERE pay_user_seq = #{pay_user_seq})
	    ,(SELECT PAY_ACCNUM FROM edu_user_pay_tb WHERE pay_user_seq = #{pay_user_seq})
	    ,(SELECT PAY_BANKNAME FROM edu_user_pay_tb WHERE pay_user_seq = #{pay_user_seq})
	    ,(SELECT PAY_TID FROM edu_user_pay_tb WHERE pay_user_seq = #{pay_user_seq})
	    ,(SELECT PAY_MOID FROM edu_user_pay_tb WHERE pay_user_seq = #{pay_user_seq})
	    ,(SELECT PAY_PRODUCT_NAME FROM edu_user_pay_tb WHERE pay_user_seq = #{pay_user_seq})
	    ,(SELECT PAY_RTN_DATA FROM edu_user_pay_tb WHERE pay_user_seq = #{pay_user_seq})
	    ,(SELECT PAY_CRC_AMOUNT FROM edu_curriculum_pay_tb a WHERE a.PAY_CRC_SEQ = (SELECT PAY_CRC_SEQ FROM edu_user_pay_tb b WHERE b.pay_user_seq = #{pay_user_seq}))
	    ,(SELECT PAY_CRC_PAYORDER FROM edu_curriculum_pay_tb WHERE PAY_CRC_SEQ = (SELECT PAY_CRC_SEQ FROM edu_user_pay_tb WHERE pay_user_seq = #{pay_user_seq}))
    	,(SELECT GISU_SEQ FROM edu_curriculum_pay_tb WHERE PAY_CRC_SEQ = (SELECT PAY_CRC_SEQ FROM edu_user_pay_tb WHERE pay_user_seq = #{pay_user_seq}))
	    )
	</insert>
	
	<!-- 특정 유저 지원신청서 검색 시작 -->
	<resultMap type="hashmap" id="eduApplyMap">
		<id property="app_seq" column="app_seq" />
		<result property="app_id" column="app_id" />
		<result property="gisu_seq" column="gisu_seq" />
		<result property="app_mt_ck" column="app_mt_ck" />
		<result property="app_mt_etc" column="app_mt_etc" />
		<result property="app_zipcode" column="app_zipcode" />
		<result property="app_address" column="app_address" />
		<result property="app_address_detail" column="app_address_detail" />
		<result property="app_em_phone" column="app_em_phone" />
		<result property="app_take_ck" column="app_take_ck" />
		<result property="app_take_dt" column="app_take_dt" />
		<result property="app_take_rt" column="app_take_rt" />
		<result property="app_abroad_ck" column="app_abroad_ck" />
		<result property="app_kmove_ck" column="app_kmove_ck" />
		<result property="app_kmove_nm" column="app_kmove_nm" />
		<result property="app_kmove_ag" column="app_kmove_ag" />
		<result property="app_kmove_st" column="app_kmove_st" />
		<result property="app_kmove_et" column="app_kmove_et" />
<!--         <result property="app_domitory_ck" column="app_domitory_ck" /> -->
        <result property="app_self_intro" column="app_self_intro" />
		<result property="app_photo_saved" column="app_photo_saved" />
		<result property="app_photo_origin" column="app_photo_origin" />
		<result property="app_edu_file_saved" column="app_edu_file_saved" />
		<result property="app_edu_file_origin" column="app_edu_file_origin" />
		<result property="app_isr_file_saved" column="app_isr_file_saved" />
		<result property="app_isr_file_origin" column="app_isr_file_origin" />
        <result property="app_imm_file_saved" column="app_imm_file_saved" />
        <result property="app_imm_file_origin" column="app_imm_file_origin" />
        <result property="app_worknet_file_saved" column="app_worknet_file_saved" />
        <result property="app_worknet_file_origin" column="app_worknet_file_origin" />
        <result property="app_ins_dt" column="app_ins_dt" />
        <result property="user_id" column="user_id" />
        <result property="user_nm" column="user_nm" />
        <result property="user_phone" column="user_phone" />
        <result property="user_email" column="user_email" />
        <result property="user_birth" column="user_birth" />
		<collection property="eduHistoryList" javaType="java.util.ArrayList" resultMap="eduApplyEduHistory" />
		<collection property="languageList" javaType="java.util.ArrayList" resultMap="eduApplyLanguage" />
		<collection property="careerList" javaType="java.util.ArrayList" resultMap="eduApplyCareer" />
		<collection property="licenseList" javaType="java.util.ArrayList" resultMap="eduApplyLicense" />
		<collection property="overseasList" javaType="java.util.ArrayList" resultMap="eduApplyOverseas" />
		<collection property="studyList" javaType="java.util.ArrayList" resultMap="eduApplyStudy" />
		<collection property="fileList" javaType="java.util.ArrayList" resultMap="eduApplyFile" />
	</resultMap>
	<resultMap type="hashmap" id="eduApplyEduHistory">
		<id property="app_edu_seq" column="app_edu_seq" />
		<result property="app_edu_sc_nm" column="app_edu_sc_nm" />
		<result property="app_edu_major" column="app_edu_major" />
		<result property="app_edu_gd_ck" column="app_edu_gd_ck" />
		<result property="app_edu_gd_dt" column="app_edu_gd_dt" />
		<result property="app_edu_sc_lo" column="app_edu_sc_lo" />
		<result property="app_edu_gd_rq" column="app_edu_gd_rq" />
	</resultMap>
	<resultMap type="hashmap" id="eduApplyCareer">
		<id property="app_crr_seq" column="app_crr_seq" />
		<result property="app_crr_place" column="app_crr_place" />
		<result property="app_crr_position" column="app_crr_position" />
		<result property="app_crr_st" column="app_crr_st" />
		<result property="app_crr_et" column="app_crr_et" />
		<result property="app_crr_dept" column="app_crr_dept" />
		<result property="app_crr_phone" column="app_crr_phone" />
	</resultMap>
	<resultMap type="hashmap" id="eduApplyLanguage">
		<id property="app_lang_seq" column="app_lang_seq" />
		<result property="app_lang_nm" column="app_lang_nm" />
		<result property="app_lang_test_nm" column="app_lang_test_nm" />
		<result property="app_lang_grade" column="app_lang_grade" />
		<result property="app_lang_ag" column="app_lang_ag" />
		<result property="app_lang_obtain_dt" column="app_lang_obtain_dt" />
	</resultMap>
	<resultMap type="hashmap" id="eduApplyLicense">
		<id property="app_license_seq" column="app_license_seq" />
		<result property="app_license_nm" column="app_license_nm" />
		<result property="app_license_grade" column="app_license_grade" />
		<result property="app_license_ag" column="app_license_ag" />
		<result property="app_license_obtain_dt" column="app_license_obtain_dt" />
	</resultMap>
	<resultMap type="hashmap" id="eduApplyOverseas">
		<id property="app_overseas_seq" column="app_overseas_seq" />
		<result property="app_overseas_nm" column="app_overseas_nm" />
		<result property="app_overseas_st" column="app_overseas_st" />
		<result property="app_overseas_et" column="app_overseas_et" />
		<result property="app_overseas_purpose" column="app_overseas_purpose" />
	</resultMap>
	<resultMap type="hashmap" id="eduApplyStudy">
		<id property="app_study_seq" column="app_study_seq" />
		<result property="app_study_nm" column="app_study_nm" />
		<result property="app_study_st" column="app_study_st" />
		<result property="app_study_et" column="app_study_et" />
		<result property="app_study_ag" column="app_study_ag" />
		<result property="app_study_detail" column="app_study_detail" />
	</resultMap>
	<resultMap type="hashmap" id="eduApplyFile">
		<id property="app_file_seq" column="app_file_seq" />
		<result property="app_file_origin" column="app_file_origin" />
		<result property="app_file_saved" column="app_file_saved" />
	</resultMap>
	<select id="selectEduApplyUpdateForm" parameterType="hashmap" resultMap="eduApplyMap">
		select
			form.app_seq
			,form.app_id
			,form.gisu_seq
			,form.app_mt_ck
			,form.app_mt_etc
			,form.app_zipcode
			,form.app_address
			,form.app_address_detail
			,form.app_em_phone
			,form.app_take_ck
			,DATE_FORMAT(form.app_take_dt, '%Y-%m-%d') as app_take_dt
			,form.app_take_rt
			,form.app_abroad_ck
			,form.app_kmove_ck
			,form.app_kmove_nm
			,form.app_kmove_ag
			,DATE_FORMAT(form.app_kmove_st, '%Y-%m-%d') as app_kmove_st
			,DATE_FORMAT(form.app_kmove_et, '%Y-%m-%d') as app_kmove_et
            ,form.app_domitory_ck
			,form.app_self_intro
			,form.app_photo_saved
			,form.app_photo_origin
			,form.app_edu_file_saved
			,form.app_edu_file_origin
			,form.app_isr_file_saved
			,form.app_isr_file_origin
            ,form.app_imm_file_saved
            ,form.app_imm_file_origin
            ,form.app_worknet_file_saved
            ,form.app_worknet_file_origin
            ,form.app_ins_dt
			,eduhistory.app_edu_seq
			,eduhistory.app_edu_sc_nm
		    ,eduhistory.app_edu_major
		    ,eduhistory.app_edu_gd_ck
		    ,DATE_FORMAT(eduhistory.app_edu_gd_dt, '%Y-%m-%d') as app_edu_gd_dt
		    ,eduhistory.app_edu_sc_lo
		    ,eduhistory.app_edu_gd_rq
			,language.app_lang_seq
			,language.app_lang_nm
		    ,language.app_lang_test_nm
		    ,language.app_lang_grade
		    ,language.app_lang_ag
		    ,DATE_FORMAT(language.app_lang_obtain_dt, '%Y-%m-%d') as app_lang_obtain_dt
		    ,career.app_crr_seq
		    ,career.app_crr_place
		    ,career.app_crr_position
		    ,DATE_FORMAT(career.app_crr_st, '%Y-%m-%d') as app_crr_st
		    ,DATE_FORMAT(career.app_crr_et, '%Y-%m-%d') as app_crr_et
		    ,career.app_crr_dept
		    ,career.app_crr_phone
		    ,study.app_study_seq
		    ,study.app_study_nm
		    ,DATE_FORMAT(study.app_study_st, '%Y-%m-%d') as app_study_st
		    ,DATE_FORMAT(study.app_study_et, '%Y-%m-%d') as app_study_et
		    ,study.app_study_ag
		    ,study.app_study_detail
		    ,license.app_license_seq
		    ,license.app_license_nm
		    ,license.app_license_grade
		    ,license.app_license_ag
		    ,DATE_FORMAT(license.app_license_obtain_dt, '%Y-%m-%d') as app_license_obtain_dt
		    ,overseas.app_overseas_seq
		    ,overseas.app_overseas_nm
		    ,DATE_FORMAT(overseas.app_overseas_st, '%Y-%m-%d') as app_overseas_st
		    ,DATE_FORMAT(overseas.app_overseas_et, '%Y-%m-%d') as app_overseas_et
		    ,overseas.app_overseas_purpose
			,file.app_file_seq
			,file.app_file_origin
			,file.app_file_saved
			, user.user_id
			, user.user_nm
			, user.user_phone
			, user.user_email
			, user.user_birth
		from
			EDU_MASTERAPPLY_FORM_TB form 
		LEFT JOIN EDU_MASTERAPPLY_EDUHISTORY_TB eduhistory
		ON
			form.app_seq = eduhistory.app_seq
		LEFT JOIN EDU_MASTERAPPLY_LANGUAGE_TB language
		ON
			form.app_seq = language.app_seq
		LEFT JOIN EDU_MASTERAPPLY_CAREER_TB career
		ON
			form.app_seq = career.app_seq
		LEFT JOIN EDU_MASTERAPPLY_STUDY_TB study
		ON
			form.app_seq = study.app_seq
		LEFT JOIN EDU_MASTERAPPLY_LICENSE_TB license
		ON
			form.app_seq = license.app_seq
		LEFT JOIN EDU_MASTERAPPLY_OVERSEAS_TB overseas
		ON
			form.app_seq = overseas.app_seq
		LEFT JOIN EDU_MASTERAPPLY_FILE_TB file
		ON
			form.app_seq = file.app_seq
        LEFT JOIN COM_USER_TB user
        ON
            form.app_id = user.user_id
		where
			app_id = #{app_id}
		and
			gisu_seq = #{gisu_seq}
	</select>
	<!-- 특정 유저 지원신청서 검색 종료 -->
	
	<!-- FAQ 상담 신청자 정보 count 조회 시작 -->
    <select id="faq_manager_select_count" parameterType="hashmap" resultType="int">
        select
            count(*)
        from
            COM_FAQ_TB
        where
            1 = 1
        <if test="searchName != null and searchName != ''">
        and
            consulting_ins_id = #{searchName}
        </if>
        <if test="searchTitle != null and searchTitle != ''">
        and
            consulting_title = #{searchTitle}
        </if>
    </select>
    <!-- FAQ 상담 신청자 정보 count 조회 종료 -->
    
    <!-- FAQ 상담 신청자 정보 조회 시작 -->
    <select id="faq_manager_select_all" parameterType="hashmap" resultType="FaqConsultingContents">
        SELECT * 
        FROM (
            SELECT  (@ROWNUM := @ROWNUM + 1) AS rn, A.* 
            FROM (
                select
                    *
                from
                    COM_FAQ_TB
                where
                    1 = 1
				and
					consulting_tp = 'A0501'
                <if test="consulting_seq != null and consulting_seq != ''">
                and
                    consulting_seq = #{consulting_seq}
                </if>
                <if test="searchName != null and searchName != ''">
                and
                    consulting_ins_id = #{searchName}
                </if>
                <if test="searchTitle != null and searchTitle != ''">
                and
                    consulting_title = #{searchTitle}
                </if>
            ) A, (SELECT @ROWNUM := 0) B 
           	order by consulting_seq desc
        ) C WHERE rn BETWEEN #{adminPager.pageBegin} AND #{adminPager.pageEnd}
    </select>
    <!-- FAQ 상담 신청자 정보 조회 종료 -->
	
	<!-- FAQ 게시판 세부내용 검색 시작 [관리자용] -->
	<resultMap type="hashmap" id="faq_manager_ContentMap">
		<id property="consulting_seq" column="consulting_seq" />
		<result property="consulting_tp" column="consulting_tp" />
		<result property="consulting_title" column="consulting_title" />
		<result property="consulting_ct" column="consulting_ct" />
		<result property="consulting_ins_id" column="consulting_ins_id" />
		<result property="consulting_ins_dt" column="consulting_ins_dt" />
		<result property="consulting_udt_dt" column="consulting_udt_dt" />
		<result property="consulting_udt_id" column="consulting_udt_id" />
	</resultMap>
	
	<select id="faq_manager_detail" parameterType="int" resultMap="faq_manager_ContentMap">
		select
			consulting_seq
			,consulting_tp
			,consulting_title
			,consulting_ct
			,consulting_ins_id
			,DATE_FORMAT(consulting_ins_dt, '%Y-%m-%d %T') as consulting_ins_dt			
			,consulting_udt_id
			,DATE_FORMAT(consulting_udt_dt, '%Y-%m-%d %T') as consulting_udt_dt
		from com_faq_tb
		where consulting_seq = #{consulting_seq}
	</select>
	<!-- FAQ 게시판 세부내용 검색 종료 -->
	
	<!-- FAQ 게시판 세부내용 등록 시작 -->
	<insert id="faq_manager_contents_insert" parameterType="FaqConsultingContents" useGeneratedKeys="true" keyProperty="consulting_seq">
		insert into
			com_faq_tb
			(
				consulting_seq
				,consulting_tp
				,consulting_title
				,consulting_ct
				,consulting_ins_id
				,consulting_ins_dt
				,consulting_udt_dt
				,consulting_udt_id
			)values(
				#{consulting_seq}
				,#{consulting_tp}
				,#{consulting_title}
				,#{consulting_ct}
				,#{consulting_ins_id}
				,now()
				,now()
				,#{consulting_ins_id}
			)
	</insert>
	<!-- FAQ 게시판 세부내용 등록 종료 -->
	
	<!-- FAQ 게시판 세부내용 수정 시작 -->
	<update id="faq_manager_contents_update" parameterType="FaqConsultingContents">
		update
			com_faq_tb
		set
			consulting_tp = #{consulting_tp}
			,consulting_title = #{consulting_title}
			,consulting_ct = #{consulting_ct}
			,consulting_udt_dt = now()
			,consulting_udt_id = #{consulting_udt_id}
		where
			consulting_seq = #{consulting_seq}
	</update>
	<!-- FAQ 게시판 세부내용 수정 종료 -->
	
    <!-- 온라인 상담 신청 정보 count 조회 시작 -->
    <select id="online_manager_select_count" parameterType="hashmap" resultType="int">
        select
            count(*)
        from
            COM_ONLINE_TB
        where
            1 = 1
        <if test="searchName != null and searchName != ''">
        and
            consulting_ins_id = #{searchName}
        </if>
        <if test="searchTitle != null and searchTitle != ''">
        and
            consulting_title = #{searchTitle}
        </if>
    </select>
    <!-- 온라인 상담 신청 정보 count 조회 종료 -->
    
    <!-- 온라인 상담 신청 정보 조회 시작 -->
    <select id="online_manager_select_all" parameterType="hashmap" resultType="OnlineConsultingContents">
        SELECT * 
        FROM (
            SELECT  (@ROWNUM := @ROWNUM + 1) AS rn, A.* 
            FROM (
                select
                    *
                from
                    COM_ONLINE_TB
                where
                    1 = 1
                <if test="consulting_seq != null and consulting_seq != ''">
                and
                    consulting_seq = #{consulting_seq}
                </if>
                <if test="searchName != null and searchName != ''">
                and
                    consulting_ins_id = #{searchName}
                </if>
                <if test="searchTitle != null and searchTitle != ''">
                and
                    consulting_title = #{searchTitle}
                </if>
            ) A, (SELECT @ROWNUM := 0) B 
            <if test="orderType == ''">
            	order by consulting_seq desc
            </if>
            <if test="orderType == 'consulting_seq'">
                <if test="orderValue == 'desc'">
                    order by A.consulting_seq desc
                </if>
                <if test="orderValue == 'asc'">
                    order by A.consulting_seq asc
                </if>
            </if>
            <if test="orderType == 'consulting_ins_dt'">
                <if test="orderValue == 'desc'">
                    order by A.consulting_ins_dt desc
                </if>
                <if test="orderValue == 'asc'">
                    order by A.consulting_ins_dt asc
                </if>
            </if>
            <if test="orderType == 'consulting_udt_dt'">
                <if test="orderValue == 'desc'">
                    order by A.consulting_udt_dt desc
                </if>
                <if test="orderValue == 'asc'">
                    order by A.consulting_udt_dt asc
                </if>
            </if>
            <if test="orderType == 'consulting_open'">
                <if test="orderValue == 'desc'">
                    order by A.consulting_open desc
                </if>
                <if test="orderValue == 'asc'">
                    order by A.consulting_open asc
                </if>
            </if>
            <if test="orderType == 'consulting_check'">
                <if test="orderValue == 'desc'">
                    order by A.consulting_check desc
                </if>
                <if test="orderValue == 'asc'">
                    order by A.consulting_check asc
                </if>
            </if>
        ) C WHERE rn BETWEEN #{adminPager.pageBegin} AND #{adminPager.pageEnd}
    </select>
    <!-- 온라인 상담 신청 정보 조회 종료 -->
    
    <!-- 온라인 상담 신청 중 하나의 상세정보 조회 시작 -->
    <select id="online_manager_select" parameterType="int" resultType="OnlineConsultingContents">
        select * from
            COM_ONLINE_TB
        where
            CONSULTING_SEQ = #{consulting_seq}
    </select>
    <!-- 온라인 상담 신청자 중 하나의 상세정보 조회 종료 -->
	
	<!-- 온라인 상담 게시판 조회수 증가 시작 -->
	<update id="online_manager_hit_update" parameterType="int">
		update
			com_online_tb
		set
			consulting_hit = consulting_hit + 1
		where
			consulting_seq = #{consulting_seq}
	</update>	
	<!-- 온라인 상담 게시판 조회수 증가 종료 -->
	
	<!-- 온라인 상담 게시판 세부내용 검색 시작 [관리자용] -->
	<resultMap type="hashmap" id="online_manager_ContentMap">
		<id property="consulting_seq" column="consulting_seq" />
		<result property="consulting_title" column="consulting_title" />
		<result property="consulting_ct" column="consulting_ct" />
		<result property="consulting_ins_id" column="consulting_ins_id" />
		<result property="consulting_check" column="consulting_check" />
		<result property="re_ct" column="re_ct" />
		<result property="re_ins_id" column="re_ins_id" />
	</resultMap>
	
	<select id="online_manager_detail" parameterType="int" resultMap="online_manager_ContentMap">
		select
			consulting_seq
			,consulting_title
			,consulting_ct
			,consulting_ins_id
			,DATE_FORMAT(consulting_ins_dt, '%Y-%m-%d %T') as consulting_ins_dt			
			,consulting_udt_id
			,DATE_FORMAT(consulting_udt_dt, '%Y-%m-%d %T') as consulting_udt_dt
			,consulting_open
			,consulting_check
			,re_ct
			,re_ins_id
			,DATE_FORMAT(re_ins_dt, '%Y-%m-%d %T') as re_ins_dt
			,re_udt_id
			,DATE_FORMAT(re_udt_dt, '%Y-%m-%d %T') as re_udt_dt
		from com_online_tb
		where consulting_seq = #{consulting_seq}
	</select>
	<!-- 온라인 상담 게시판 세부내용 검색 종료 -->
	
	<!-- 온라인 상담 게시판 글 강제수정(관리자용) 시작 -->
	<update id="online_manager_contents_update" parameterType="OnlineConsultingContents">
		update
			com_online_tb
		set
			consulting_title = #{consulting_title}
			,consulting_ct = #{consulting_ct}
			,consulting_open = #{consulting_open}
			,consulting_check = #{consulting_check}
			,consulting_udt_dt = now()
			,consulting_udt_id = #{consulting_udt_id}
		where
			consulting_seq = #{consulting_seq}
	</update>
	<!-- 온라인 상담 게시판 글 강제수정(관리자용) 종료 -->
	
	<!-- 온라인상담 답변 세부내용 등록 시작 -->
	<update id="online_manager_reply_insert" parameterType="OnlineConsultingContents">
		update
			com_online_tb
		set
			consulting_check = 2
			,re_ct = #{re_ct}
			,re_ins_dt = now()
			,re_ins_id = #{re_ins_id}
			,re_udt_dt = now()
			,re_udt_id = #{re_ins_id}
		where
			consulting_seq = #{consulting_seq}
	</update>
	<!-- 온라인상담 답변 세부내용 등 종료 -->
	
	<!-- 온라인상담 답변내용 수정 시작 -->
	<update id="online_manager_reply_update" parameterType="OnlineConsultingContents">
		update
			com_online_tb
		set
			re_ct = #{re_ct}
			,re_udt_dt = now()
			,re_udt_id = #{re_udt_id}
		where
			consulting_seq = #{consulting_seq}
	</update>
	<!-- 온라인상담 답변내용 수정 종료 -->
	
    
    <!-- 오프라인 상담 신청자 정보 count 조회 시작 -->
    <select id="offline_manager_select_count" parameterType="hashmap" resultType="int">
        select
            count(*)
        from
            COM_OFFLINE_TB
        where
            1 = 1
        <if test="searchName != null and searchName != ''">
        and
            user_nm = #{searchName}
        </if>
        <if test="searchTitle != null and searchTitle != ''">
        and
            apply_title = #{searchTitle}
        </if>
    </select>
    <!-- 오프라인 상담 신청자 정보 count 조회 종료 -->
    
    <!-- 오프라인 상담 신청자 정보 조회 시작 -->
    <select id="offline_manager_select_all" parameterType="hashmap" resultType="OfflineConsultingContents">
        SELECT * 
        FROM (
            SELECT  (@ROWNUM := @ROWNUM + 1) AS rn, A.* 
            FROM (
                select
                    *
                from
                    COM_OFFLINE_TB
                where
                    1 = 1
                <if test="seq != null and seq != ''">
                and
                    seq = #{seq}
                </if>
                <if test="searchName != null and searchName != ''">
                and
                    user_nm = #{searchName}
                </if>
                <if test="searchTitle != null and searchTitle != ''">
                and
                    apply_title = #{searchTitle}
                </if>
            ) A, (SELECT @ROWNUM := 0) B
            <if test="orderType == ''">
            	order by seq desc 
            </if>
            <if test="orderType == 'user_sex'">
                <if test="orderValue == 'desc'">
                    order by A.user_sex desc
                </if>
                <if test="orderValue == 'asc'">
                    order by A.user_sex asc
                </if>
            </if>
            <if test="orderType == 'user_age'">
                <if test="orderValue == 'desc'">
                    order by A.user_age desc
                </if>
                <if test="orderValue == 'asc'">
                    order by A.user_age asc
                </if>
            </if>
            <if test="orderType == 'apply_datetime'">
                <if test="orderValue == 'desc'">
                    order by A.apply_datetime desc
                </if>
                <if test="orderValue == 'asc'">
                    order by A.apply_datetime asc
                </if>
            </if>
            <if test="orderType == 'user_ins_dt'">
                <if test="orderValue == 'desc'">
                    order by A.user_ins_dt desc
                </if>
                <if test="orderValue == 'asc'">
                    order by A.user_ins_dt asc
                </if>
            </if>
            <if test="orderType == 'user_udt_dt'">
                <if test="orderValue == 'desc'">
                    order by A.user_udt_dt desc
                </if>
                <if test="orderValue == 'asc'">
                    order by A.user_udt_dt asc
                </if>
            </if>
            <if test="orderType == 'user_visits'">
                <if test="orderValue == 'desc'">
                    order by A.user_visits desc
                </if>
                <if test="orderValue == 'asc'">
                    order by A.user_visits asc
                </if>
            </if>
        ) C WHERE rn BETWEEN #{adminPager.pageBegin} AND #{adminPager.pageEnd}
    </select>
    <!-- 오프라인 상담 신청자 정보 조회 종료 -->
    
    <!-- 오프라인 상담 신청 중 하나의 상세정보 조회 시작 -->
    <select id="offline_manager_select" parameterType="String" resultType="OfflineConsultingContents">
        select * from
            COM_OFFLINE_TB
        where
            SEQ = #{1}
    </select>
    <!-- 오프라인 상담 신청자 중 하나의 상세정보 조회 종료 -->
    
    <!-- 오프라인 상담 신청 중 하나의 상세정보 DB 수정 시작 -->
    <update id="offline_manager_mail_send" parameterType="OfflineConsultingContents">
        update
            COM_OFFLINE_TB
        set
            SEND_MAIL_TITLE = #{send_mail_title}
            ,SEND_MAIL_CONTENTS = #{send_mail_contents}
            ,USER_UDT_ID = #{user_udt_id}
            ,USER_UDT_DT = now()
        where
            SEQ = #{seq}
    </update>
    <!-- 오프라인 상담 신청자 중 하나의 상세정보 DB 수정 종료 -->
    
    <!-- 서브 배너에 참조할 기수 정보 리스트 출력-->
    <!-- 2018. 10. 1 정대영 -->
	<select id="subbanner_select_gisu_crc_nm" resultType="String">
		SELECT
            GISU_CRC_NM
		FROM
			EDU_CURRICULUM_GISU_TB
		WHERE
			GISU_PER = 'B1501'
	</select>
	<!-- 서브 배너 등록 종료 -->
    
    <!-- 서브 배너 등록 시작 -->
    <!-- 2018. 9. 20 정대영 -->
	<insert id="subbanner_insert" parameterType="SEASubBanner">
		INSERT INTO
			EDU_ADMIN_SUB_BANNER_TB
			(
                EDU_SUB_BAN_SEQ
				,EDU_SUB_BAN_NM
				,EDU_SUB_BAN_LINK
                ,EDU_SUB_BAN_ORIGIN
				,EDU_SUB_BAN_SAVED
				,EDU_SUB_BAN_INS_DT
				,EDU_SUB_BAN_INS_ID
				,EDU_SUB_BAN_UDT_DT
	            ,EDU_SUB_BAN_UDT_ID
	            ,EDU_SUB_BAN_EPS
				,EDU_SUB_BAN_OD
			<if test="edu_sub_ban_st != null and edu_sub_ban_st != ''">
				,EDU_SUB_BAN_ST
			</if>
			<if test="edu_sub_ban_et != null and edu_sub_ban_et != ''">
				,EDU_SUB_BAN_ET
			</if>
			)VALUES(
                #{edu_sub_ban_seq}
                ,#{edu_sub_ban_nm}
                ,#{edu_sub_ban_link}
				,#{edu_sub_ban_origin}
                ,#{edu_sub_ban_saved}
             	,now()
                ,#{edu_sub_ban_ins_id}
				,now()
                ,#{edu_sub_ban_udt_id}
                ,'B2401'
	            ,#{edu_sub_ban_od}
	        <if test="edu_sub_ban_st != null and edu_sub_ban_st != ''">
				,#{edu_sub_ban_st}
			</if>
			<if test="edu_sub_ban_et != null and edu_sub_ban_et != ''">
				,#{edu_sub_ban_et}
			</if>
			)			
	</insert>
	<!-- 서브 배너 등록 종료 -->
	
		
	<!-- 서브 배너 삭제 -->
    <!-- 2018. 10. 1 정대영 -->
	<delete id="subbanner_delete" parameterType="Int">
		DELETE
		FROM
			EDU_ADMIN_SUB_BANNER_TB
		WHERE
			EDU_SUB_BAN_SEQ = #{edu_sub_ban_seq}
	</delete>
	<!-- 서브 배너 삭제 종료 -->
	
	<!-- 서브 배너 리스트 출력 -->
    <!-- 2018. 9. 21 정대영 -->
	<select id="subbanner_list" resultType="SEASubBanner">
		SELECT
            EDU_SUB_BAN_SEQ
			,EDU_SUB_BAN_NM
			,EDU_SUB_BAN_LINK
			,EDU_SUB_BAN_SAVED
            ,EDU_SUB_BAN_EPS
			,EDU_SUB_BAN_OD
			,EDU_SUB_BAN_ST
			,EDU_SUB_BAN_ET
		FROM
			EDU_ADMIN_SUB_BANNER_TB
	</select>
	<!-- 서브 배너 등록 종료 -->
	
	<!-- 서브 배너 수정 정보 출력 -->
    <!-- 2018. 9. 27 정대영 -->
	<select id="subbanner_update_select" parameterType="SEASubBanner" resultType="SEASubBanner">
		SELECT
			 EDU_SUB_BAN_SEQ
			,EDU_SUB_BAN_NM
			,EDU_SUB_BAN_LINK
			,EDU_SUB_BAN_ORIGIN
			,EDU_SUB_BAN_SAVED
            ,EDU_SUB_BAN_EPS
			,EDU_SUB_BAN_OD
			,EDU_SUB_BAN_ST
			,EDU_SUB_BAN_ET
		FROM
			EDU_ADMIN_SUB_BANNER_TB
		WHERE
			EDU_SUB_BAN_SEQ = #{edu_sub_ban_seq}
	</select>
	<!-- 서브 배너 수정 정보 출력 종료 -->
	
	<!-- 서브 배너 수정 시작 -->
    <!-- 2018. 9. 28 정대영 -->
	<update id="subbanner_update" parameterType="SEASubBanner">
		UPDATE
			EDU_ADMIN_SUB_BANNER_TB
		SET
			EDU_SUB_BAN_NM = #{edu_sub_ban_nm}
			,EDU_SUB_BAN_LINK = #{edu_sub_ban_link}
			,EDU_SUB_BAN_UDT_DT = now()
            ,EDU_SUB_BAN_UDT_ID = #{edu_sub_ban_udt_id}
        <if test="edu_sub_ban_st != null and edu_sub_ban_st != ''">
			,EDU_SUB_BAN_ST = #{edu_sub_ban_st}
		</if>
		<if test="edu_sub_ban_et != null and edu_sub_ban_et != ''">
			,EDU_SUB_BAN_ET = #{edu_sub_ban_et}
		</if>
		<if test="edu_sub_ban_origin != null and edu_sub_ban_origin != ''">
			,EDU_SUB_BAN_ORIGIN = #{edu_sub_ban_origin}	
			,EDU_SUB_BAN_SAVED = #{edu_sub_ban_saved}
		</if>
		WHERE
			EDU_SUB_BAN_SEQ = #{edu_sub_ban_seq}		
	</update>
	<!-- 서브 배너 수정 종료 -->
	
	<!-- 메인 배너 등록 시작; 2018. 9. 27. 김준영 -->
	<insert id="banner_insert" parameterType="SEABanner">
		INSERT INTO
			EDU_ADMIN_BANNER_TB
		(
			EDU_BAN_NM
			, EDU_BAN_LINK
			, EDU_BAN_ORIGIN
			, EDU_BAN_SAVED
			, EDU_BAN_INS_DT
			, EDU_BAN_INS_ID
			, EDU_BAN_UDT_DT
			, EDU_BAN_UDT_ID
			, EDU_BAN_EPS
			, EDU_BAN_OD
		)VALUES(
			#{edu_ban_nm}
			, #{edu_ban_link}
			, #{edu_ban_origin}
			, #{edu_ban_saved}
			, now()
			, #{edu_ban_ins_id}
			, now()
			, #{edu_ban_udt_id}
			, 'B2401'
			, #{edu_ban_od}
		)
	</insert>
	<!-- 메인 배너 등록 종료 -->
	
	<!-- 메인 배너 삭제 -->
    <!-- 2018. 10. 2 정대영 -->
	<delete id="banner_delete" parameterType="Int">
		DELETE
		FROM
			EDU_ADMIN_BANNER_TB
		WHERE
			EDU_BAN_SEQ = #{edu_ban_seq}
	</delete>
	<!-- 메인 배너 삭제 종료 -->
	
	<!-- 메인 배너 노출 되는 리스트 출력 시작; 2018. 9. 28. 김준영 -->
	<select id="banner_shown_list" resultType="SEABanner">
		SELECT
			EDU_BAN_SEQ
			, EDU_BAN_NM
			, EDU_BAN_LINK
			, EDU_BAN_SAVED
            , EDU_BAN_EPS
			, EDU_BAN_OD
		FROM
			EDU_ADMIN_BANNER_TB
		WHERE
			EDU_BAN_EPS = 'B2400'
		ORDER BY
			EDU_BAN_OD ASC
	</select>
	<!-- 메인 배너 노출 되는 리스트 출력 종료 -->
	
	<!-- 메인 배너 노출 되지 않는 리스트 출력 시작; 2018. 9. 28. 김준영 -->
	<select id="banner_unshown_list" resultType="SEABanner">
		SELECT
			EDU_BAN_SEQ
			, EDU_BAN_NM
			, EDU_BAN_LINK
			, EDU_BAN_SAVED
            , EDU_BAN_EPS
			, EDU_BAN_OD
		FROM
			EDU_ADMIN_BANNER_TB
		WHERE
			EDU_BAN_EPS = 'B2401'
		ORDER BY
			EDU_BAN_INS_DT DESC
	</select>
	<!-- 메인 배너 노출 되지 않는 리스트 출력 종료 -->
	
	<!-- 메인 배너 등록시 기존 과정명 불러오기 시작; 2018. 9. 27. 김준영 -->
	<select id="curriculum_nm_list" resultType="String">
		SELECT
			CRC_NM
		FROM
			EDU_CURRICULUM_TB
		WHERE
			CRC_PER = 'B1301'
	</select>
	<!-- 메인 배너 등록시 기존 과정명 불러오기 종료 -->
	
	<!-- 메인 배너 순서 출력 시작; 2018. 9. 28. 김준영 -->
	<select id="banner_od_list" resultType="Integer">
		SELECT
			EDU_BAN_OD
		FROM
			EDU_ADMIN_BANNER_TB
		WHERE
			EDU_BAN_EPS = 'B2400'
		ORDER BY
			EDU_BAN_OD ASC
	</select>
	<!-- 메인 배너 순서 출력 종료 -->
	
	<!-- 메인 배너 노출 변경 시 순서, 노출 여부 변경 시작; 2018. 9. 28. 김준영 -->
	<update id="banner_shown_update" parameterType="hashmap">
		UPDATE
			EDU_ADMIN_BANNER_TB
		SET
			EDU_BAN_UDT_ID = #{edu_ban_udt_id}
			, EDU_BAN_UDT_DT = now()
			<if test="edu_ban_eps == 'B2400'">
				, EDU_BAN_OD = 0
				, EDU_BAN_EPS = 'B2401'
			</if>
			<if test="edu_ban_eps == 'B2401'">
				, EDU_BAN_OD = #{od_update}
				, EDU_BAN_EPS = 'B2400'
			</if>
		WHERE
			EDU_BAN_SEQ = #{edu_ban_seq}
	</update>
	<!-- 메인 배너 노출 변경 시 순서, 노출 여부 변경 종료 -->
	
	<!-- 메인 배너 노출여부, 순서 초기화 시작; 2018. 9. 28. 김준영  -->
	<update id="banner_ini" parameterType="String">
		UPDATE
			EDU_ADMIN_BANNER_TB
		SET
			EDU_BAN_UDT_ID = #{edu_ban_udt_id}
			, EDU_BAN_UDT_DT = now()
			, EDU_BAN_OD = 0
			, EDU_BAN_EPS = 'B2401'
	</update>
	<!-- 메인 배너 노출여부, 순서 초기화 종료  -->
	
	<!-- 서브 배너 노출 되는 리스트 출력 시작; 2018. 10. 1. 이재준 -->
	<select id="subbanner_shown_list" resultType="SEASubBanner">
		SELECT
			EDU_SUB_BAN_SEQ
			, EDU_SUB_BAN_NM
			, EDU_SUB_BAN_LINK
			, EDU_SUB_BAN_SAVED
            , EDU_SUB_BAN_EPS
			, EDU_SUB_BAN_OD
			, EDU_SUB_BAN_ST
			, EDU_SUB_BAN_ET
		FROM
			EDU_ADMIN_SUB_BANNER_TB
		WHERE
			EDU_SUB_BAN_EPS = 'B2400'
		ORDER BY
			EDU_SUB_BAN_OD ASC
	</select>
	<!-- 서브 배너 노출 되는 리스트 출력 종료 -->
	
	<!-- 서브 배너 노출 되지 않는 리스트 출력 시작; 2018. 10. 1. 이재준 -->
	<select id="subbanner_unshown_list" resultType="SEASubBanner">
		SELECT
			EDU_SUB_BAN_SEQ
			, EDU_SUB_BAN_NM
			, EDU_SUB_BAN_LINK
			, EDU_SUB_BAN_SAVED
            , EDU_SUB_BAN_EPS
			, EDU_SUB_BAN_OD
		FROM
			EDU_ADMIN_SUB_BANNER_TB
		WHERE
			EDU_SUB_BAN_EPS = 'B2401'
		ORDER BY
			EDU_SUB_BAN_INS_DT DESC
	</select>
	<!-- 서브 배너 노출 되지 않는 리스트 출력 종료 -->
	
	<!-- 서브 배너 순서 출력 시작 2018. 10. 1. 이재준 -->
	<select id="subbanner_od_list" resultType="Integer">
		SELECT
			EDU_SUB_BAN_OD
		FROM
			EDU_ADMIN_SUB_BANNER_TB
		WHERE
			EDU_SUB_BAN_EPS = 'B2400'
		ORDER BY
			EDU_SUB_BAN_OD ASC
	</select>
	<!-- 서브 배너 순서 출력 종료 -->
	
	<!-- 서브 배너 노출 변경 시 순서, 노출 여부 변경 시작; 2018. 10. 1. 이재준 -->
	<update id="subbanner_shown_update" parameterType="hashmap">
		UPDATE
			EDU_ADMIN_SUB_BANNER_TB
		SET
			EDU_SUB_BAN_UDT_ID = #{edu_sub_ban_udt_id}
			, EDU_SUB_BAN_UDT_DT = now()
			<if test="edu_sub_ban_eps == 'B2400'">
				, EDU_SUB_BAN_OD = 0
				, EDU_SUB_BAN_EPS = 'B2401'
			</if>
			<if test="edu_sub_ban_eps == 'B2401'">
				, EDU_SUB_BAN_OD = #{sub_od_update}
				, EDU_SUB_BAN_EPS = 'B2400'
			</if>
		WHERE
			EDU_SUB_BAN_SEQ = #{edu_sub_ban_seq}
	</update>
	<!-- 서브 배너 노출 변경 시 순서, 노출 여부 변경 종료 -->
	
	<!-- 서브 배너 노출여부, 순서 초기화 시작; 2018. 10. 1. 이재준  -->
	<update id="subbanner_ini" parameterType="String">
		UPDATE
			EDU_ADMIN_SUB_BANNER_TB
		SET
			EDU_SUB_BAN_UDT_ID = #{edu_sub_ban_udt_id}
			, EDU_SUB_BAN_UDT_DT = now()
			, EDU_SUB_BAN_OD = 0
			, EDU_SUB_BAN_EPS = 'B2401'
	</update>
	<!-- 서브 배너 노출여부, 순서 초기화 종료  -->
	
	<!-- 메인 배너 순서 변경 시작; 2018. 10. 1. 김준영 -->
	<update id="banner_od_udt" parameterType="hashmap">
		UPDATE
			EDU_ADMIN_BANNER_TB
		SET
			EDU_BAN_OD = #{edu_ban_od}
		WHERE
			EDU_BAN_SEQ = #{edu_ban_seq}
	</update>
	<!-- 메인 배너 순서 변경 종료 -->
	
	<!-- 메인 배너 순서 변경 시작; 2018. 10. 1. 김준영 -->
	<update id="subbanner_od_udt" parameterType="hashmap">
		UPDATE
			EDU_ADMIN_SUB_BANNER_TB
		SET
			EDU_SUB_BAN_OD = #{edu_sub_ban_od}
		WHERE
			EDU_SUB_BAN_SEQ = #{edu_sub_ban_seq}
	</update>
	<!-- 메인 배너 순서 변경 종료 -->
	
	<!-- 메인 배너 수정 정보 출력 -->
    <!-- 2018. 10. 1 이재준 -->
	<select id="banner_update_select" parameterType="SEABanner" resultType="SEABanner">
		SELECT
			EDU_BAN_SEQ
			,EDU_BAN_NM
			,EDU_BAN_LINK
			,EDU_BAN_ORIGIN
			,EDU_BAN_SAVED
            ,EDU_BAN_EPS
			,EDU_BAN_OD
		FROM
			EDU_ADMIN_BANNER_TB
		WHERE
			EDU_BAN_SEQ = #{edu_ban_seq}
	</select>
	<!-- 배너 수정 정보 출력 종료 -->
	
	<!-- 메인 배너 수정 시작 -->
    <!-- 2018. 10. 1 이재준 -->
	<update id="banner_update" parameterType="SEABanner">
		UPDATE
			EDU_ADMIN_BANNER_TB
		SET
			EDU_BAN_NM = #{edu_ban_nm}
			,EDU_BAN_LINK = #{edu_ban_link}
			,EDU_BAN_UDT_DT = now()
            ,EDU_BAN_UDT_ID = #{edu_ban_udt_id}
		<if test="edu_ban_origin != null and edu_ban_origin != ''">
			,EDU_BAN_ORIGIN = #{edu_ban_origin}	
			,EDU_BAN_SAVED = #{edu_ban_saved}
		</if>
		WHERE
			EDU_BAN_SEQ = #{edu_ban_seq}
	</update>
	<!-- 배너 수정 종료 -->
	
	<!-- 링크 관리 시 보여 줄  리스트 시작; 2018. 10. 5. 김준영 -->
	<select id="select_gisu_crc_nm" resultType="SEACurGisu">
		select
			gisu_seq
			, crc_seq
			, gisu_crc_class
            , gisu_crc_nm
            , gisu_crc_division
		from
			edu_curriculum_gisu_tb
		where
			gisu_per = 'B1501'
	</select>
	<!-- 링크 관리 시 보여 줄  리스트 종료 -->
	
	<!-- 대표 링크 변경; 2018. 10. 8. 김준영-->
	<update id="update_gisu_crc_division" parameterType="hashmap">
		update
			edu_curriculum_gisu_tb
		set
			<!-- 구분자 0(전부 비등록), 1(비등록 -> 서울), 2(비등록 -> 광주) -->
			<if test="division == 0">
				gisu_crc_division = 'B2500'
			</if>
			<if test="division == 1">
				gisu_crc_division = 'B2501'
			</if>		
			<if test="division == 2">
				gisu_crc_division = 'B2502'
			</if>
		where
			gisu_seq = #{gisu_seq}
	</update>
	
	<select id="select_curriculum" resultType="SEACurriculum">
		select
			crc_seq
			, crc_class
			, crc_nm
		from
			edu_curriculum_tb
	</select>
	
	
	
	
</mapper>