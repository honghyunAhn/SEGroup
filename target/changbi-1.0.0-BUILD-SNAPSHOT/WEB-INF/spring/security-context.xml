<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:b="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">

	<!-- globals configuration information -->
	<util:map id="seconfig" key-type="java.lang.String" value-type="java.lang.Object">

		<!-- 접근 권한 오류페이지 -->
		<b:entry key="accessDeniedUrl" value="/error/accessDenied"/>

	</util:map>

	<http pattern="/favicon.ico" security="none" />
	<http pattern="/resources/**" security="none" />
	<http pattern="/upload/**" security="none" />
	<http pattern="/error/**" security="none" />
	<http pattern="/app/**" security="none" /> <!-- app 다운로드 관련 -->
	<http pattern="/iden/**" security="none" /> <!-- 본인인증 -->

	<http auto-config="true" use-expressions="true" entry-point-ref="authenticationEntryPoint">
		<intercept-url pattern="/" access="permitAll"/>
		<intercept-url pattern="/mypage/**" access="hasAnyRole('ROLE_USER')" />
		<intercept-url pattern="/**" access="permitAll" />

		<custom-filter ref="concurrentSessionFilter" position="CONCURRENT_SESSION_FILTER" /> <!-- 중복로그인 처리 filter -->
		<custom-filter ref="usernamePasswordAuthenticationFilter" before="FORM_LOGIN_FILTER" />
		<custom-filter ref="certAuthenticationFilter" after="FORM_LOGIN_FILTER" /><!-- 인증서로그인필터 -->
		<custom-filter after="EXCEPTION_TRANSLATION_FILTER" ref="ajaxSessionTimeoutFilter"/>

		<logout logout-url="/user/signout" logout-success-url="/"/>
		<access-denied-handler ref="accessDeniedHandler" />
		<!-- <session-management invalid-session-url="/" session-authentication-strategy-ref="sas" /> -->

		<csrf disabled="true"/>
	</http>

	<b:bean id="ajaxSessionTimeoutFilter" class="com.aracomm.base.security.filter.AjaxSessionTimeoutFilter">
		<b:property name="ajaxHeader" value="AJAX" />
	</b:bean>

	<!-- ajax 구현을 위한 커스텀 헨들러 적용 -->
	<b:bean id="authenticationEntryPoint" class="com.aracomm.base.security.handler.UnauthorizedAccessHandler">
		<b:constructor-arg name="loginFormUrl" value="/" />
		<b:constructor-arg name="errorPage" value="#{seconfig.accessDeniedUrl}" /><!-- 커스텀함 -->
		<b:property name="redirect" value="false" />
	</b:bean>

	<b:bean id="loginSuccessHandler" class="com.aracomm.changbi.security.handler.SignInSuccessHandler">
		<b:property name="defaultTargetUrl" value="/" /><!-- 로그인 후 페이지 이동 설정 -->
		<b:property name="httpRedirect" value="false" /> <!-- https요청으로 로그인 후 http로 바꿔 이동할 것인지 여부 -->
		<b:property name="httpPort" value="#{config['http.port']}" /> <!-- http 포트 -->
	</b:bean>

	<b:bean id="loginFailureHandler" class="com.aracomm.base.security.handler.SignInFailureHandler">
		<b:constructor-arg name="defaultFailureUrl" value="/error/loginFailure" />
	</b:bean>

	<b:bean id="accessDeniedHandler" class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
		<b:property name="errorPage" value="#{seconfig.accessDeniedUrl}" />
	</b:bean>

	<!-- 아이디/비밀번호 로그인 처리 filter (ajax, ssl 환경에서 CORS문제 처리) -->
	<b:bean id="usernamePasswordAuthenticationFilter" class="com.aracomm.base.security.authentication.CorsAwareUsernamePasswordAuthenticationFilter">
		<b:property name="filterProcessesUrl" value="/user/signin" />

		<!-- ajax 구현을 위한 커스텀 헨들러 적용 -->
		<b:property name="authenticationFailureHandler" ref="loginFailureHandler" />
		<b:property name="authenticationSuccessHandler" ref="loginSuccessHandler" />

		<b:property name="authenticationManager" ref="authenticationManager" />
		<b:property name="sessionAuthenticationStrategy" ref="sas" />
	</b:bean>
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="userDetailsService">
			<password-encoder ref="passwordEncoder">
				<!-- <salt-source user-property="username" /> -->
			</password-encoder>
		</authentication-provider>
	</authentication-manager>
	<b:bean id="userDetailsService" class="com.aracomm.changbi.security.authentication.UserAuthenticationDetailService"/>
	<!-- 비밀번호 hash 모듈 지정 -->
	<!-- <b:bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder">
		<b:constructor-arg name="strength" value="256"></b:constructor-arg>
	</b:bean> -->
	<b:bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

	<!-- 스프링 시큐리티에서 기본으로 사용하는 중복로그인 체크 필터 -->
	<b:bean id="concurrentSessionFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">
		<b:constructor-arg name="sessionRegistry" ref="sessionRegistry" />
		<b:constructor-arg name="sessionInformationExpiredStrategy" ref="sessionInformationExpiredStrategy" />
	</b:bean>
	<!-- 중복로그인으로 세션이 만료된 경우 처리 handler -->
	<b:bean id="sessionInformationExpiredStrategy" class="com.aracomm.base.security.authentication.DuplLoginSessionExpiredHandler">
		<b:constructor-arg name="expiredUrl" value="/" />
	</b:bean>

	<b:bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />
	<b:bean id="sas" class="org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy">
		<b:constructor-arg>
			<b:list>
				<b:bean class="org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy">
					<b:constructor-arg ref="sessionRegistry"/>
				</b:bean>
				<b:bean class="org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy">
					<b:constructor-arg ref="sessionRegistry"/>
					<b:property name="maximumSessions" value="1" />
				</b:bean>
			</b:list>
		</b:constructor-arg>
	</b:bean>

	<!-- 인증서로그인 Filter 정의 -->
	<b:bean id="certAuthenticationFilter" class="com.aracomm.base.security.filter.CertAuthenticationFilter">
		<!-- usernameAuthenticationFilter 와 동일 -->
		<b:property name="filterProcessesUrl" value="/user/certsignin" /> <!-- 인증서로그인처리 url -->
		<b:property name="authenticationFailureHandler" ref="loginFailureHandler" />
		<b:property name="authenticationSuccessHandler" ref="loginSuccessHandler" />
		<!-- <b:property name="sessionAuthenticationStrategy" ref="sas" /> -->
		<!-- usernameAuthenticationFilter 와 동일 -->

		<b:property name="authenticationManager" ref="certAuthenticationManager" />
	</b:bean>
	<!-- 인증서로그인 manager 정의 -->
	<b:bean id="certAuthenticationManager" class="org.springframework.security.authentication.ProviderManager">
	    <b:constructor-arg>
	        <b:list>
	            <b:bean class="com.aracomm.changbi.security.authentication.CertAuthenticationProvider"/>
	        </b:list>
	    </b:constructor-arg>
	</b:bean>

</b:beans>