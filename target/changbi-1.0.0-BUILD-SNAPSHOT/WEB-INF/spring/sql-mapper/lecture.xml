<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.aracomm.changbi.mypage.dao.LectureDao">

	<!-- 개인 포인트 조회 -->
	<select id="selectPointInfo" resultType="hashmap">
		SELECT
			BALANCE
		FROM CB_POINT
		WHERE USER_ID = #{user_id}
		ORDER BY ID DESC
		LIMIT 1
	</select>

	<!-- 개인정보 조회 -->
	<select id="selectUserInfo" resultType="hashmap">
		SELECT
			CM.NAME/*성명*/
			, CM.ID /*아이디*/
			, CM.PHONE /*휴대전화*/
			, CM.EMAIL /*전자우편*/
			, IFNULL(CM.POST_CODE, '') AS POST_CODE /*주소-우편번호*/
			, IFNULL(CM.ADDR1, '') AS ADDR1 /*주소-주소1*/
			, IFNULL(CM.ADDR2, '') AS ADDR2 /*주소-주소2*/
			, IFNULL(CM.SCHOOL_NAME, '') AS SCHOOL_NAME /*학교명*/
			, IFNULL(CM.SCHOOL_POST_CODE, '') AS SCHOOL_POST /*학교명*/
			, IFNULL(CM.SCHOOL_ADDR1, '') AS SCHOOL_ADDR1 /*학교주소1*/
			, IFNULL(CM.SCHOOL_ADDR2, '') AS SCHOOL_ADDR2 /*학교주소2*/
			, CASE CM.GRADE WHEN '1' THEN '교원 회원' WHEN '일반 회원' THEN '고문' END AS GRADE
		FROM CB_MEMBER AS CM
		WHERE ID = #{user_id}
	</select>

	<!-- 진행연수과정 조회 -->
	<select id="selectProgressList" resultType="hashmap">
		<![CDATA[
			SELECT
				CLA.ID
				, CLA.GROUP_ID
				, CLA.CARDINAL_ID
				, CLA.COURSE_ID
				, IFNULL(CLA.DES_NUM, '') AS DES_NUM /*연수지명번호*/
				, CCA.LEARN_TYPE /*연수구분*/
				, CCA.NAME AS CARDINAL_NAME /*기수명*/
				, CONCAT(IF(LOCATE(CCA.LEARN_TYPE, 'J')>0,'직무 ',''), IF(LOCATE(CCA.LEARN_TYPE,'S')>0,'자율 ',''),IF(LOCATE(CCA.LEARN_TYPE,'M')>0,'집합 ',''), IF(LOCATE(CCA.LEARN_TYPE,'G')>0,'단체 ','')) AS LEARN_TYPE_NAME
				, CCB.COURSE_CODE /*연수영역*/
				, (SELECT`NAME` FROM FF_CODE WHERE CODE = CCB.COURSE_CODE AND GROUP_ID = 'course') AS COURSE_CODE_NAME
				, CCB.NAME /*연수과정*/
				, CCB.CREDIT /*학점*/
				, CCA.LEARN_START_DATE /*연수시작일*/
				, CCA.LEARN_END_DATE /*연수종료일*/
				, (DATE_ADD(CCA.LEARN_END_DATE, INTERVAL 1 DAY) ) AS REAL_START_DATE /*복습시작일*/
				, (DATE_ADD(CCA.LEARN_END_DATE, INTERVAL 180 DAY) ) AS REAL_END_DATE /*복습종료일*/
				, CLA.PAYMENT_STATE
				, CLA.PAYMENT_TYPE
				, CCB.MAIN_TB_ID
				, CCB.SUB_TB_ID
			FROM CB_LEARN_APP AS CLA
				JOIN CB_CARDINAL AS CCA ON CLA.CARDINAL_ID = CCA.ID
				JOIN CB_COURSE AS CCB ON CLA.COURSE_ID = CCB.ID
			WHERE CLA.USER_ID = #{user_id}
				AND CLA.PAYMENT_STATE = 2 /*2:결제완료*/
				AND (CLA.REQ_TYPE IS NULL OR CLA.REQ_TYPE IN (1, 2))
				AND TO_DAYS(CCA.LEARN_END_DATE) >= TO_DAYS(NOW())
				AND CLA.USE_YN  = 'Y'
		]]>
		<!-- AND NOW() BETWEEN CCA.LEARN_START_DATE AND CCA.LEARN_END_DATE -->
	</select>

	<!-- 대기연수과정 조회 -->
	<select id="selectWaitingList" resultType="hashmap">
		<![CDATA[
			SELECT
				CLA.ID
				, CLA.GROUP_ID
				, CLA.CARDINAL_ID
				, CLA.COURSE_ID
				, IFNULL(CLA.DES_NUM, '') AS DES_NUM /*연수지명번호*/
				, CCA.LEARN_TYPE /*연수구분*/
				, CCA.NAME AS CARDINAL_NAME /*기수명*/
				, CONCAT(IF(LOCATE(CCA.LEARN_TYPE, 'J')>0,'직무 ',''), IF(LOCATE(CCA.LEARN_TYPE,'S')>0,'자율 ',''),IF(LOCATE(CCA.LEARN_TYPE,'M')>0,'집합 ',''), IF(LOCATE(CCA.LEARN_TYPE,'G')>0,'단체 ','')) AS LEARN_TYPE_NAME
				, CCB.COURSE_CODE /*연수영역*/
				, (SELECT`NAME` FROM FF_CODE WHERE CODE = CCB.COURSE_CODE AND GROUP_ID = 'course') AS COURSE_CODE_NAME
				, CCB.NAME /*연수과정*/
				, CCB.CREDIT /*학점*/
				, CCA.LEARN_START_DATE /*연수시작일*/
				, CCA.LEARN_END_DATE /*연수종료일*/
				, (DATE_ADD(CCA.LEARN_END_DATE, INTERVAL 1 DAY) ) AS REAL_START_DATE /*복습시작일*/
				, (DATE_ADD(CCA.LEARN_END_DATE, INTERVAL 180 DAY) ) AS REAL_END_DATE /*복습종료일*/
				, CLA.PAYMENT_STATE
				, CLA.PAYMENT_TYPE
				, CCB.MAIN_TB_ID
				, CCB.SUB_TB_ID
			FROM CB_LEARN_APP AS CLA
				JOIN CB_CARDINAL AS CCA ON CLA.CARDINAL_ID = CCA.ID
				JOIN CB_COURSE AS CCB ON CLA.COURSE_ID = CCB.ID
			WHERE CLA.USER_ID = #{user_id}
				AND (CLA.PAYMENT_STATE IN (1,3) OR (CLA.PAYMENT_STATE =2 AND CLA.REQ_TYPE = 1))
				AND CLA.USE_YN  = 'Y'
				AND (CLA.REQ_TYPE IS NULL OR CLA.REQ_TYPE IN (1, 2))
				/* AND CLA.PAYMENT_STATE IN (1,3) */
		]]>
		<!-- AND (CLA.PAYMENT_STATE IN (1,3) OR (CLA.PAYMENT_STATE = 2 and CCA.LEARN_START_DATE > NOW())) -->
	</select>

	<!-- 학습완료과정 조회 -->
	<select id="selectCompleteList" resultType="hashmap">
		<![CDATA[
			SELECT
				CLA.ID
				, CLA.GROUP_ID
				, CLA.CARDINAL_ID
				, CLA.COURSE_ID
				, IFNULL(CLA.DES_NUM, '') AS DES_NUM /*연수지명번호*/
				, CCA.LEARN_TYPE /*연수구분*/
				, CCA.NAME AS CARDINAL_NAME /*기수명*/
				, CONCAT(IF(LOCATE(CCA.LEARN_TYPE, 'J')>0,'직무 ',''), IF(LOCATE(CCA.LEARN_TYPE,'S')>0,'자율 ',''),IF(LOCATE(CCA.LEARN_TYPE,'M')>0,'집합 ',''), IF(LOCATE(CCA.LEARN_TYPE,'G')>0,'단체 ','')) AS LEARN_TYPE_NAME
				, CCB.COURSE_CODE /*연수영역*/
				, (SELECT`NAME` FROM FF_CODE WHERE CODE = CCB.COURSE_CODE AND GROUP_ID = 'course') AS COURSE_CODE_NAME
				, CCB.NAME /*연수과정*/
				, CCB.CREDIT /*학점*/
				, CCA.LEARN_START_DATE /*연수시작일*/
				, CCA.LEARN_END_DATE /*연수종료일*/
				, (DATE_ADD(CCA.LEARN_END_DATE, INTERVAL 1 DAY) ) AS REAL_START_DATE /*복습시작일*/
				, (DATE_ADD(CCA.LEARN_END_DATE, INTERVAL 180 DAY) ) AS REAL_END_DATE /*복습종료일*/
				, CLA.PAYMENT_STATE
				, CLA.PAYMENT_TYPE
				, CCB.MAIN_TB_ID
				, CCB.SUB_TB_ID
				, IFNULL((TO_DAYS((DATE_ADD(CCA.LEARN_END_DATE, INTERVAL 180 DAY))) - TO_DAYS(NOW()) + 1), 0) AS REVIEW_DAYS
				, CLA.REQ_TYPE
				, CLA.ISSUE_YN
				, CLA.ISSUE_NUM
			FROM CB_LEARN_APP AS CLA
				JOIN CB_CARDINAL AS CCA ON CLA.CARDINAL_ID = CCA.ID
				JOIN CB_COURSE AS CCB ON CLA.COURSE_ID = CCB.ID
			WHERE CLA.USER_ID = #{user_id}
				AND (CLA.REQ_TYPE IS NULL OR CLA.REQ_TYPE IN (1, 2))
				AND CLA.PAYMENT_STATE = 2 /*2:결제완료*/
				AND TO_DAYS(CCA.LEARN_END_DATE) < TO_DAYS(NOW())
				AND CLA.USE_YN  = 'Y'
		]]>
	</select>

	<select id="selectBookPayCheck" resultType="String">
		SELECT COUNT(*)
		FROM CB_BOOK_APP
		WHERE USER_ID = #{user_id}
			AND PAYMENT_YN = 'N'
	</select>

	<select id="selectBookDeliveryCheck" resultType="String">
		SELECT COUNT(*)
		FROM CB_BOOK_APP
		WHERE USER_ID = #{user_id}
			AND PAYMENT_YN = 'Y'
  		AND DELIV_YN = 'N'
	</select>

	<select id="selectBookPayment" resultType="String">
		SELECT COUNT(*)
		FROM CB_BOOK_APP
		WHERE USER_ID = #{user_id}
			AND PAYMENT_YN = 'Y'
			AND DELIV_YN = 'Y'
	</select>

	<!-- 과정 상세 정보 조회  -->
	<select id="selectClassInfo" resultType="hashmap">
		SELECT
			CLA.ID
			, CLA.GROUP_ID
			, CLA.CARDINAL_ID
			, CLA.COURSE_ID
			, IFNULL(CLA.DES_NUM, '') AS DES_NUM /*연수지명번호*/
			, CCA.LEARN_TYPE /*연수구분*/
			, CONCAT(IF(LOCATE(CCA.LEARN_TYPE, 'J')>0,'직무 ',''), IF(LOCATE(CCA.LEARN_TYPE,'S')>0,'자율 ',''),IF(LOCATE(CCA.LEARN_TYPE,'M')>0,'집합 ',''), IF(LOCATE(CCA.LEARN_TYPE,'G')>0,'단체 ','')) AS LEARN_TYPE_NAME
			, CCB.COURSE_CODE /*연수영역*/
			, CCB.NAME /*연수과정*/
			, CCB.CREDIT /*학점*/
			, CCB.COMPLETE_TIME /*이수시간*/
			, CCB.MOBILE_YN /*모바일 서비스 여부*/
			, CCA.NAME AS CARDINAL_NAME /*연수 기수*/
			, CCA.LEARN_START_DATE /*연수시작일*/
			, CCA.LEARN_END_DATE /*연수종료일*/
			, (DATE_ADD(CCA.LEARN_END_DATE, INTERVAL 1 DAY) ) AS REAL_START_DATE /*복습시작일*/
			, (DATE_ADD(CCA.LEARN_END_DATE, INTERVAL 180 DAY) ) AS REAL_END_DATE /*복습종료일*/
			, CCB.EXAM_PERIOD /*출석고사 교시*/
			, CLA.PAYMENT_STATE
			, (TO_DAYS(NOW()) - TO_DAYS(CCA.LEARN_START_DATE) + 1) AS ELAPSE_DAY
			, IFNULL((TO_DAYS((DATE_ADD(CCA.LEARN_END_DATE, INTERVAL 180 DAY))) - TO_DAYS(NOW()) + 1), 0) AS REVIEW_DAYS
		FROM CB_LEARN_APP AS CLA
			JOIN CB_CARDINAL AS CCA ON CLA.CARDINAL_ID = CCA.ID
			JOIN CB_COURSE AS CCB ON CLA.COURSE_ID = CCB.ID
		WHERE CLA.USER_ID = #{user_id}
			AND CLA.ID = #{id}
			AND CLA.CARDINAL_ID = #{cardinal}
			AND CLA.COURSE_ID = #{course}
			AND CLA.USE_YN  = 'Y'
	</select>

	<!-- 사용자의 학습시간  -->
	<select id="selectTotLearnTime" resultType="String">
		SELECT
			IFNULL(SUM(LEARN_TIME)/60,0) AS TOT_LEARN_TIME
		FROM CB_ATT_LEC
		WHERE USER_ID = #{user_id}
			AND CARDINAL_ID = #{cardinal}
			AND COURSE_ID = #{course}
	</select>

	<!-- 해당 클래스의 수강자 평균 학습시간 -->
	<select id="selectAvgLearnTime" resultType="String">
		SELECT CAST(IFNULL(AVG(TMP_SUM.TOT_LEARN_TIME),0) AS INT) AS AVG_LEARN_TIME
		FROM (
			SELECT IFNULL(SUM(LEARN_TIME)/60,0) AS TOT_LEARN_TIME
			FROM CB_ATT_LEC
			WHERE CARDINAL_ID = #{cardinal}
			AND COURSE_ID = #{course}
			GROUP BY USER_ID
		) AS TMP_SUM
	</select>

	<!-- 해당 클래스의 전체 수업시간(MAX) -->
	<select id="selectBaseLearnTime" resultType="String">
		SELECT IFNULL(SUM(STUDY),0) AS BASE_LEARN_TIME
		FROM CB_CHAPTER
		WHERE COURSE_ID = #{course}
	</select>

	<!-- 해당 클래스의 사용자 수강 완료 챕터의 수 -->
	<select id="selectUserJindo" resultType="String">
	SELECT COUNT(*) AS MY_JINDO
	FROM CB_ATT_LEC
	WHERE USER_ID = #{user_id}
		AND CARDINAL_ID = #{cardinal}
		AND COURSE_ID = #{course}
		AND PROG_YN = 'Y'
	</select>

	<!-- 해당 클래스의 전체 챕터의 수 -->
	<select id="selectBaseJindo" resultType="String">
		SELECT
			COUNT(*) AS TOT_JINDO
		FROM CB_CHAPTER
		WHERE COURSE_ID = #{course}
	</select>

	<!-- 사용자의 수강기록 조회 -->
	<select id="selectClassStudyHist" resultType="hashmap">
		SELECT
			COUNT(*) AS ACCESS_COUNT /*수강 접속수*/
			, IFNULL(MIN(DATE_FORMAT(START_DATE, "%Y-%m-%d %H:%i:%s") ), ' ') AS START_DATE /*최초접속시간*/
			, IFNULL(MAX(DATE_FORMAT(END_DATE, "%Y-%m-%d %H:%i:%s")) , ' ') AS END_DATE /*최종접속시간*/
		FROM CB_ATT_LEC_HISTORY
		WHERE USER_ID = #{user_id}
			AND CARDINAL_ID = #{cardinal}
			AND COURSE_ID = #{course}
	</select>

	<!-- 해당 클래스의 평균 학습시간 조회 -->
	<select id="selectClassAvgStudyTime" resultType="String">
		SELECT
			CAST(IFNULL(AVG(LEARN_TIME),0)/60 AS SIGNED INTEGER) AS AVG_CHAPTER_TIME /* 차시당 평균 학습시간 */
		FROM CB_ATT_LEC
		WHERE USER_ID = #{user_id}
			AND CARDINAL_ID = #{cardinal}
			AND COURSE_ID = #{course}
		/*GROUP BY USER_ID*/
	</select>

	<!-- 해당 클래스의 전체 평균 진도 차시 갯수 -->
	<select id="selectClassAvgChapter" resultType="String">
		SELECT
			IFNULL(AVG(TMP_CNT.CNT_JINDO),0) AS AVG_JINDO
		FROM (
			SELECT
				IFNULL(COUNT(CHAPTER),0) AS CNT_JINDO
			FROM CB_ATT_LEC
			WHERE CARDINAL_ID = #{cardinal}
				AND COURSE_ID = #{course}
				AND PROG_YN = 'Y'
			GROUP BY USER_ID
		) AS TMP_CNT
	</select>

	<select id="selectJindoList" resultType="hashmap">
		SELECT
			CCB.ID
			, CCB.ORDER_NUM
			, IFNULL(CAL.PROG_YN, 'N') AS PROG_YN
		FROM CB_LEARN_APP AS CLA
			JOIN CB_COURSE AS CCA ON CLA.COURSE_ID = CCA.ID
			JOIN CB_CHAPTER AS CCB ON CCA.ID = CCB.COURSE_ID
			LEFT JOIN CB_ATT_LEC AS CAL ON CLA.CARDINAL_ID = CAL.CARDINAL_ID AND CAL.COURSE_ID = CAL.COURSE_ID  AND CCB.ID = CAL.CHAPTER AND CLA.USER_ID = CAL.USER_ID
		WHERE CLA.COURSE_ID = #{course}
			AND CLA.ID = #{id}
			AND CLA.CARDINAL_ID = #{cardinal}
			AND CLA.USER_ID = #{user_id}
		ORDER BY CCB.ORDER_NUM ASC
	</select>

	<!-- 해당 클래스의 차시(챕터) 목록 조회  -->
	<select id="selectChapterList" resultType="hashmap">
		SELECT
			CCB.ID AS CHAPTER_ID
			, CCB.NAME AS CHAPTER_NAME
			, CCB.STUDY
			, CONCAT(LPAD(ROUND(CCB.STUDY/60), 2, '0'), '분 ', LPAD(CCB.STUDY%60, 2, '0'), '초') AS STUDY2
			, CCB.CHK
			, CCB.MAIN_URL
			, CCB.MOBILE_URL
			, CCB.TEACHER
			, CCB.FILE_INFO
			, CCB.SERVICE_TYPE
			, CCB.ORDER_NUM
			, IFNULL(CAL.ID, 0) AS ATT_ID
			, IFNULL(CAL.LEARN_TIME, 0) AS LEARN_TIME
			, IFNULL(CAL.PROG_YN, 'N') AS PROG_YN
			, IFNULL(CCA.WIDTH, 0) AS WIDTH
			, IFNULL(CCA.HEIGHT, 0) AS HEIGHT
			, IFNULL(CCA.TASTING_URL, '') AS TASTING_URL
		FROM CB_LEARN_APP AS CLA
			JOIN CB_COURSE AS CCA ON CLA.COURSE_ID = CCA.ID
			JOIN CB_CHAPTER AS CCB ON CCA.ID = CCB.COURSE_ID
			LEFT JOIN CB_ATT_LEC AS CAL ON CLA.CARDINAL_ID = CAL.CARDINAL_ID AND CAL.COURSE_ID = CAL.COURSE_ID  AND CCB.ID = CAL.CHAPTER AND CLA.USER_ID = CAL.USER_ID
		WHERE CLA.COURSE_ID = #{course}
			AND CLA.ID = #{id}
			AND CLA.CARDINAL_ID = #{cardinal}
			AND CLA.USER_ID = #{user_id}
			AND CLA.USE_YN  = 'Y'
		ORDER BY CCB.ORDER_NUM ASC
	</select>

	<!-- 챕터정보 조회 -->
	<select id="selectChapterInfo" resultType="hashmap">
		SELECT
			CCB.ID AS CHAPTER_ID
			, CCB.NAME AS CHAPTER_NAME
			, CCB.STUDY
			, CONCAT(LPAD(ROUND(CCB.STUDY/60), 2, '0'), '분 ', LPAD(CCB.STUDY%60, 2, '0'), '초') AS STUDY2
			, CCB.CHK
			, CCB.MAIN_URL
			, CCB.MOBILE_URL
			, CCB.TEACHER
			, CCB.FILE_INFO
			, CCB.SERVICE_TYPE
			, CCB.ORDER_NUM
			, IFNULL(CAL.ID, 0) AS ATT_ID
			, IFNULL(CAL.LEARN_TIME, 0) AS LEARN_TIME
			, IFNULL(CAL.PROG_YN, 'N') AS PROG_YN
			, IFNULL(CCA.WIDTH, 0) AS WIDTH
			, IFNULL(CCA.HEIGHT, 0) AS HEIGHT
			, IFNULL(CCA.TASTING_URL, '') AS TASTING_URL
		FROM CB_LEARN_APP AS CLA
			JOIN CB_COURSE AS CCA ON CLA.COURSE_ID = CCA.ID
			JOIN CB_CHAPTER AS CCB ON CCA.ID = CCB.COURSE_ID
			LEFT JOIN CB_ATT_LEC AS CAL ON CLA.CARDINAL_ID = CAL.CARDINAL_ID AND CAL.COURSE_ID = CAL.COURSE_ID  AND CCB.ID = CAL.CHAPTER AND CLA.USER_ID = CAL.USER_ID
		WHERE CLA.COURSE_ID = #{course}
			AND CLA.ID = #{id}
			AND CLA.CARDINAL_ID = #{cardinal}
			AND CLA.USER_ID = #{user_id}
			AND CLA.USE_YN  = 'Y'
			AND CCB.ID = #{chapter}

		ORDER BY CCB.ORDER_NUM ASC
	</select>

	<!-- 과정연수후기 작성확인 -->
	<select id="selectLessonReviewCnt" resultType="int">
		SELECT
			COUNT(1)
		FROM CB_BOARD
		WHERE USER_ID = #{user_id}
			AND CARDINAL_ID = #{cardinal}
			AND COURSE_ID = #{course}
			AND BOARD_TYPE = ${board_type}
	</select>

	<!-- 과정연수후기 작성(insert) -->
	<insert id="insertLessonReview">
		INSERT INTO CB_BOARD (
			BOARD_TYPE, CARDINAL_ID, COURSE_ID
			, USER_ID, TITLE, COMMENT
			, REG_USER, REG_DATE
			, UPD_USER, UPD_DATE
		)
		VALUES (
			#{board_type}, #{cardinal}, #{course}
			, #{user_id}, #{title}, #{comment}
			, #{user_id}, DATE_FORMAT(NOW(),'%Y%m%d%H%i%s')
			, #{user_id}, DATE_FORMAT(NOW(),'%Y%m%d%H%i%s')
		)

		<selectKey resultType="Integer" keyProperty="id" keyColumn="id">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>

	<!-- 기존 수강이력정보 조회 -->
	<select id="selectAttLec" resultType="hashMap">
		SELECT
			ID
			, LEARN_TIME
			, PROG_YN
		FROM CB_ATT_LEC
		WHERE USER_ID = #{user_id}
			AND CARDINAL_ID = #{cardinal}
			AND COURSE_ID = #{course}
			AND CHAPTER = #{chapter}
	</select>

<!-- 수강이력 등록  -->
	<insert id="insertAttLec">
		INSERT INTO CB_ATT_LEC (
			USER_ID, CARDINAL_ID, COURSE_ID
			, CHAPTER, LEARN_TIME, PROG_YN
			, CHASI, STUDY, CHK
			, LEARN_APP_ID
		)
		VALUES (
			#{user_id}, #{cardinal}, #{course}
			, #{chapter}, 0, 'N'
			, #{idx}, #{study}, #{chk}
			, #{id}
		)
	</insert>

	<!-- 수강이력 등록  -->
	<insert id="insertAttLecHist">
		INSERT INTO CB_ATT_LEC_HISTORY (
			USER_ID, CARDINAL_ID, COURSE_ID
			, CHAPTER, START_DATE
			, CHASI, LEARN_APP_ID
		)
		VALUES (
			#{user_id}, #{cardinal}, #{course}
			, #{chapter},DATE_FORMAT(NOW(), "%Y%m%d%H%i%s")
			, #{idx}, #{id}
		)
	</insert>

	<!-- 수강이력 갱신 -->
	<update id="updateAttLec">
		UPDATE CB_ATT_LEC
			SET LEARN_TIME = LEARN_TIME + 5
			<if test="learn_time != null and learn_time > chk*60">
				, PROG_YN = 'Y'
			</if>
		WHERE USER_ID = #{user_id}
			AND CARDINAL_ID = #{cardinal}
			AND COURSE_ID = #{course}
			AND CHAPTER = #{chapter}
	</update>

	<!-- 수강이력 갱신 -->
	<update id="updateAttLecHist">
		UPDATE CB_ATT_LEC_HISTORY
			SET END_DATE = DATE_FORMAT(NOW(), "%Y%m%d%H%i%s")
		WHERE USER_ID = #{user_id}
			AND CARDINAL_ID = #{cardinal}
			AND COURSE_ID = #{course}
			AND CHAPTER = #{chapter}
	</update>

	<!-- 온라인시험/온라인과제 목록 조회 -->
	<select id="selectExamList" resultType="hashmap">
		<![CDATA[
		SELECT
			CQ.SEQ
			, CQ.ID
			, CQ.TITLE
			, CQ.QUIZ_TYPE
			, CQ.START_DATE
			, CQ.END_DATE
			, IF(TO_DAYS(NOW()) >= TO_DAYS(CQ.START_DATE) AND TO_DAYS(NOW()) <= TO_DAYS(CQ.END_DATE), 'Y', 'N') IS_READY
			, CQ.EXAM_TIME
			/*, CQ.TOTAL_EXAM*/
			, CQ.SCORE
			, CQ.GUIDE
			, CQ.RETRY
			, CQ.OPEN_YN
			, CQ.USE_YN
			, CQ.LIMITS
			, CQ.LIMIT_KEYS
			, (SELECT COUNT(ID) FROM CB_REPORT WHERE CARDINAL_ID = CQ.CARDINAL_ID AND COURSE_ID  = CQ.COURSE_ID AND QUIZ_ID = CQ.ID AND USER_ID = #{user_id}) AS TAKE_YN
			, IFNULL((SELECT SCORE FROM CB_REPORT AS CR WHERE CR.LEARN_APP_ID = #{id} AND CR.CARDINAL_ID = CQ.CARDINAL_ID AND CR.COURSE_ID = CQ.COURSE_ID AND CR.QUIZ_ID = CQ.ID AND CR.QUIZ_TYPE = CQ.QUIZ_TYPE AND CR.MARK_YN = 'Y' AND USER_ID = #{user_id}), '-') AS QUIZ_SCORE
			, (SELECT CORRECT FROM CB_REPORT WHERE CARDINAL_ID = CQ.CARDINAL_ID AND COURSE_ID  = CQ.COURSE_ID AND QUIZ_ID = CQ.ID AND USER_ID = #{user_id} AND QUIZ_TYPE = '3') AS CORRECT
		FROM CB_QUIZ AS CQ
		WHERE CARDINAL_ID = #{cardinal}
			AND COURSE_ID = #{course}
			AND QUIZ_TYPE = #{quiz_type} /*1:출석고사, 2:온라인시험, 3:온라인과제*/
		ORDER BY ORDER_NUM ASC
	]]>
	</select>

	<!-- 온라인시험/온라인과제의 정보 조회 -->
	<select id="selectExamInfo" resultType="hashmap">
			SELECT
				CQ.SEQ
				, CQ.ID
				, CQ.TITLE
				, CQ.QUIZ_TYPE
				, CQ.START_DATE
				, CQ.END_DATE
				, CQ.EXAM_TIME
				, CQ.SCORE
				, CQ.GUIDE
				, CQ.RETRY
				, CQ.OPEN_YN
				, CQ.USE_YN
				, CQ.LIMITS
				, CQ.LIMIT_KEYS
				, DATE_FORMAT(NOW(), "%Y-%m-%d %H:%i:%s") AS TIME
				, DATE_FORMAT(CQ.START_DATE, "%Y.%m.%d.") DESC_START_DATE
				, SUBSTR(_UTF8'일월화수목금토', DAYOFWEEK(CQ.START_DATE), 1 ) AS DESC_STATE_DATE_WEEK
				<if test="quiz != null and quiz != '' ">
				, CAST(SCORE/(SELECT COUNT(1) FROM CB_QUIZ_ITEM WHERE QUIZ_POOL_ID = CQ.QUIZ_POOL_ID) AS SIGNED INTEGER) AS ITEM_SCORE
				</if>
				, (SELECT DATE_FORMAT(ATT_EVAL_DATE, "%Y.%m.%d.") FROM CB_CARDINAL AS CC WHERE CC.ID = CQ.CARDINAL_ID ) AS DESC_ATT_EVAL_DATE
				, (SELECT SUBSTR(_UTF8'일월화수목금토', DAYOFWEEK(ATT_EVAL_DATE), 1 ) FROM CB_CARDINAL AS CC WHERE CC.ID = CQ.CARDINAL_ID ) AS DESC_ATT_EVAL_DATE_WEEK
				, (SELECT CC.EXAM_PERIOD FROM CB_COURSE AS CC WHERE CC.ID = CQ.COURSE_ID) AS EXAM_PERIOD
				<![CDATA[
				, IF(TO_DAYS(NOW()) < TO_DAYS((SELECT ATT_EVAL_DATE FROM CB_CARDINAL AS CC WHERE CC.ID = CQ.CARDINAL_ID )), 'Y', 'N') AS EDITABLE
				]]>
			FROM CB_QUIZ AS CQ
				JOIN CB_QUIZ_POOL AS CQP ON CQ.QUIZ_POOL_ID = CQP.ID
			WHERE 1=1
				AND CQ.CARDINAL_ID = #{cardinal}
				AND CQ.COURSE_ID = #{course}
				<if test="quiz != null and quiz != '' ">
					AND CQ.ID  = #{quiz}
				</if>
				<if test="quiz_type != null and quiz_type != '' ">
					AND CQ.QUIZ_TYPE = #{quiz_type}
				</if>

	</select>

	<select id="selectExamTakeCount" resultType="int">
		SELECT COUNT(*)
		  FROM CB_EXAM_TAKE_HISTORY
		 WHERE LEARN_APP_ID = #{id}
		   AND QUIZ_ID = #{quiz}
	</select>

	<insert id="insertExamTakeHistory" parameterType="hashmap">
		INSERT INTO CB_EXAM_TAKE_HISTORY (
			LEARN_APP_ID, QUIZ_ID, REG_USER, REG_DATE
		) VALUES (
			#{id}, #{quiz}, #{user_id}, NOW()
		)
	</insert>

	<!-- 온라인시험/온라인과제 항목 조회 -->
	<select id="selectExamItemList" resultType="hashmap">
		SELECT
			CQI.ID
			, CQB.ID AS QUIZ_BANK_ID
			, CQB.QUIZ_TYPE
			, CQB.CLASS_TYPE
			, CQB.TITLE
			, CQB.OS_TYPE
			, CQB.EXAM_TYPE
			, CQB.EXAM1
			, CQB.EXAM2
			, CQB.EXAM3
			, CQB.EXAM4
			, CQB.EXAM5
			, CQB.CATEGORY
			, CQB.CATE_NAME
			, CQB.COMMENT
			, CQB.QUIZ_LEVEL
			<if test="answeryn eq 'Y'.toString()">
			, CQB.O_ANSWER
			, CQB.S_ANSWER
			</if>
		FROM CB_QUIZ AS CQ
			 JOIN CB_QUIZ_ITEM AS CQI ON CQ.QUIZ_POOL_ID = CQI.QUIZ_POOL_ID
			 JOIN CB_QUIZ_BANK AS CQB ON CQI.QUIZ_BANK_ID = CQB.ID
		WHERE 1=1
			AND (CQI.USE_YN IS NULL OR CQI.USE_YN = 'Y')
			<if test="quiz != null">
					AND CQ.ID = #{quiz}
			</if>
			<if test="quiz == null">
				AND CQ.ID = (SELECT QUIZ_ID FROM CB_REPORT WHERE USER_ID = #{user_id} AND CARDINAL_ID = #{cardinal} AND COURSE_ID = #{course} AND QUIZ_TYPE = #{quiz_type})
			</if>
		ORDER BY CQI.ORDER_NUM ASC
	</select>

	<select id="selectExamReplyList" resultType="hashmap">
		SELECT ID
			, REPORT_ID
			, QUIZ_BANK_ID
			, QUIZ_ITEM_ID
			, OS_TYPE /*문항종류*/
			, O_ANSWER /*객관식 정답*/
			, S_ANSWER /*주관식 정답*/
			, O_REPLY /*객관식 본인 답*/
			, S_REPLY /*주관식 보인 답 */
			, P_SCORE /*문제 개별 점수*/
			, T_SCORE /*문제 개별 득점점수*/
		FROM CB_QUIZ_REPLY
		WHERE REPORT_ID = #{report_id}
		ORDER BY ORDER_NUM ASC
	</select>

	<!-- 퀴즈 채점정보 저정  -->
	<insert id="insertExamReport">
		INSERT INTO CB_REPORT (
			CARDINAL_ID, COURSE_ID, QUIZ_ID
			, USER_ID, QUIZ_TYPE, EXAM_NUM
			, SCORE, FILE_ID, ANSWER, MARK_YN
			, ORDER_NUM, USE_YN
			, REG_USER, REG_DATE
			, LEARN_APP_ID
		) VALUES (
			#{cardinal}, #{course}, #{quiz}
			, #{user_id}, #{quiztype}, #{examnum}
			, #{score}, #{fileid}, #{answer}, #{markyn}
			, #{ordernum}, #{useyn}
			, #{user_id}, NOW()
			, #{id}
		)
		<selectKey resultType="Integer" keyProperty="id" keyColumn="id">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>


<!-- <if test="quiz != null and quiz != '' "> -->
	<!-- 퀴즈 정답 제출 -->
	<insert id="insertExamReply">
		INSERT INTO CB_QUIZ_REPLY (
			REPORT_ID, QUIZ_BANK_ID, QUIZ_ITEM_ID
			, OS_TYPE, TITLE
			, COMMENT, O_ANSWER, S_ANSWER
			<if test="oreply != null and oreply != '' "> , O_REPLY </if>
			<if test="sreply != null and sreply != '' "> , S_REPLY </if>
			, P_SCORE, T_SCORE, ORDER_NUM
			, USE_YN, REG_USER, REG_DATE
		)
		VALUES (
			#{report}, #{bank}, #{item}
			, #{ostype}, #{title}
			, #{comment}, #{oanswer}, #{sanswer}
			<if test="oreply != null and oreply != '' "> , #{oreply} </if>
			<if test="sreply != null and sreply != '' "> , #{sreply} </if>
			, #{pscore}, #{tscore}, #{ordernum}
		  , #{useyn}, #{user_id}, NOW()
		)
	</insert>

	<!-- 재응시인 경우, 기존 입력된 데이터 삭제 -->
	<delete id="deleteExamReport">
		DELETE FROM CB_REPORT
		WHERE ID = #{id}
			AND LEARN_APP_ID = #{learn_app_id}
			AND CARDINAL_ID = #{cardinal_id}
			AND COURSE_ID = #{course_id}
			AND QUIZ_ID = #{quiz_id}
			AND USER_ID = {user_id}
	</delete>

	<!-- 재응시인 경우, 기존 입력된 데이터 삭제 -->
	<delete id="deleteExamReply">
		DELETE FROM CB_QUIZ_REPLY
		WHERE REPORT_ID = #{id}
	</delete>

	<!-- 연수지명번호 수정 -->
	<update id="updateLocaleCode">
		UPDATE CB_LEARN_APP
			SET DES_NUM = #{des_num}
		WHERE ID = #{learn}
			AND USER_ID = #{user_id}
	</update>

	<!-- 교제구매신청 -  교제 조회  -->
	<select id="selectOrderBookList"  resultType="hashmap">
		SELECT
			CB.ID
			, CB.NAME
			, CB.SUPPLY_CODE
			, CB.MAIN_YN
			, CB.PRICE
			, CB.STOCK
			, CCB.NAME AS COURSE_NAME
			, CCB.MAIN_TB_ID
			, CCB.MAIN_PRICE
			, CCB.SUB_TB_ID
			, CCB.SUB_PRICE
		FROM CB_BOOK AS CB
			JOIN CB_COURSE AS CCB ON CCB.MAIN_TB_ID = CB.ID
			JOIN CB_LEARN_APP AS CLA ON CCB.ID = CLA.COURSE_ID
			JOIN CB_CARDINAL AS CCA ON CLA.CARDINAL_ID = CCA.ID
		WHERE CLA.USER_ID = #{user_id}
			AND CLA.ID = #{id}
			AND CB.USE_YN = 'Y'
	</select>

	<!-- 설문조사 내용 (만족도 강의평가 두가지 형태의 설문이 있음)-->
	<select id="selectClassPollInfo" resultType="hashmap">
		SELECT
			CS.ID
			, CS.TITLE
			, CS.A_LEAD
			, CS.SURVEY_CODE
			, (
					SELECT COUNT(1)
					FROM CB_SURVEY_REPLY AS CSR
					WHERE CSR.SURVEY_ID = CS.ID
						AND CSR.REG_USER = #{user_id}
						AND CSR.LEARN_APP_ID = #{learn_app_id}
						AND CSR.CARDINAL_ID = #{cardinal}
						AND CSR.COURSE_ID = #{course}
			) AS ACCEPT_CNT
		FROM CB_SURVEY AS CS
			JOIN CB_SURVEY_CARDINAL AS CSC ON CS.ID = CSC.SURVEY_ID
		WHERE 1 = 1
			AND CS.SURVEY_CODE = #{survey_code}
			AND CS.USE_YN = 'Y'
			AND CSC.CARDINAL_ID =  #{cardinal}
	</select>

	<!-- 설문조사 목록 -->
	<select id="selectClassPollList" resultType="hashmap">
		SELECT
			CSI.ID
			, CSI.SURVEY_ID
			, CSC.CARDINAL_ID
			, CSI.ITEM_TYPE /*문항유형(1:객관식, 2:주관식, 3:객관+주관식)*/
			, CSI.SURVEY_CODE
			, CSI.TITLE
			, CSI.EXAM1
			, CSI.EXAM2
			, CSI.EXAM3
			, CSI.EXAM4
			, CSI.EXAM5
			, CSI.EXAM6
			, CSI.EXAM7
			, CSI.EXAM1_YN
			, CSI.EXAM2_YN
			, CSI.EXAM3_YN
			, CSI.EXAM4_YN
			, CSI.EXAM5_YN
			, CSI.EXAM6_YN
			, CSI.EXAM7_YN
			, CSI.ORDER_NUM
		FROM CB_SURVEY AS CS
			JOIN CB_SURVEY_CARDINAL AS CSC ON CS.ID = CSC.SURVEY_ID
			JOIN CB_SURVEY_ITEM AS CSI ON CS.ID = CSI.SURVEY_ID
		WHERE 1 = 1
			AND CS.SURVEY_CODE = #{survey_code}
			AND CS.USE_YN = 'Y'
			AND (CSI.USE_YN = 'Y' OR CSI.USE_YN IS NULL)
			AND CSC.CARDINAL_ID = #{cardinal}
		ORDER BY CSI.ORDER_NUM ASC
	</select>

	<!-- 설문응답 저장 -->
	<insert id="insertSurveyResponse">
		INSERT INTO CB_SURVEY_REPLY (
			SURVEY_ID, ITEM_ID, ITEM_TYPE
			, LEARN_APP_ID, CARDINAL_ID, COURSE_ID
			, EXAM1_YN, EXAM2_YN, EXAM3_YN, EXAM4_YN
			, EXAM5_YN, EXAM6_YN, EXAM7_YN
			, EXAM1, EXAM2, EXAM3, EXAM4
			, EXAM5, EXAM6, EXAM7
			, ANSWER, ORDER_NUM
			, REG_USER, UPD_USER
		)
		VALUES
		<foreach collection="list" item="item" separator=",">
		(
			#{item.survey_id}, #{item.item_id}, #{item.item_type}
			, #{item.learn_app_id}, #{item.cardinal_id}, #{item.course_id}
			, #{item.exam1_yn}, #{item.exam2_yn}, #{item.exam3_yn}, #{item.exam4_yn}
			, #{item.exam5_yn}, #{item.exam6_yn}, #{item.exam7_yn}
			, #{item.exam1}, #{item.exam2}, #{item.exam3}, #{item.exam4}
			, #{item.exam5}, #{item.exam6}, #{item.exam7}
			, #{item.answer}, #{item.order_num}
			, #{item.reg_user}, #{item.upd_user}
		)
		</foreach>

		<selectKey resultType="Integer" keyProperty="id" keyColumn="id">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>

	<!-- 츨석고사장 검색 -->
	<select id="selectExamSpotList" resultType="hashmap">
		SELECT
			ID
			, MAP_FILE
			, NAME
			, SPOT
			, POST_CODE
			, ADDR1
			, ADDR2
			, TEL
			, LIMIT_NUM
			, TRAFFIC
			, IFNULL((SELECT URL_PATH FROM FF_ATTACH_FILE_DETAIL WHERE FILE_ID = MAP_FILE LIMIT 1), '') AS MAP_URL_PATH
		FROM CB_EXAM_SPOT
		WHERE 1=1
			AND USE_YN = 'Y'
		ORDER BY ORDER_NUM ASC
	</select>

	<!-- 출석고사장 선택 -->
	<insert id="insertExamSpot">
		INSERT INTO CB_REPORT (
			ID
			, LEARN_APP_ID, CARDINAL_ID, COURSE_ID
			, QUIZ_ID, USER_ID
			, EXAM_SPOT_ID, QUIZ_TYPE
			, EXAM_NUM
			, USER_FILE_ID, SCORE, MARK_YN
			, REG_USER, REG_DATE
			, UPD_USER, UPD_DATE
		)
		VALUES (
			<if test="report != null and report != '' ">#{report}</if>
		 	<if test="report == null or report == '' ">null</if>
			, #{id}, #{cardinal}, #{course}
			, #{quiz}, #{user_id}
			, #{hall_id}, 1
			, (SELECT CONCAT('${hall_id}', CONCAT('${exam_period}',LPAD(CAST(IFNULL(SUBSTRING((SELECT MAX(CR.EXAM_NUM) FROM CB_REPORT AS CR WHERE CR.COURSE_ID = #{course} AND CR.CARDINAL_ID =#{cardinal}), 5, 4), '0') AS INT)+1, 4, '0'))))
			, #{fileid}, 0, 'N'
			, #{user_id}, NOW()
			, #{user_id}, NOW()
		) ON DUPLICATE KEY UPDATE
				EXAM_SPOT_ID = #{hall_id}
				, USER_FILE_ID = #{fileid}
				, EXAM_NUM = (SELECT CONCAT('${hall_id}', CONCAT('${exam_period}',LPAD(CAST(IFNULL(SUBSTRING((SELECT MAX(CR.EXAM_NUM) FROM CB_REPORT AS CR WHERE CR.COURSE_ID = #{course} AND CR.CARDINAL_ID =#{cardinal}), 5, 4), '0') AS INT)+1, 4, '0'))))
				, UPD_USER = #{user_id}
				, UPD_DATE = NOW()

		<selectKey resultType="Integer" keyProperty="id" keyColumn="id">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>

	<!-- 출석고사 고사장 지정 여부 확인 -->
	<select id="selectReportInfo" resultType="hashmap">
		SELECT
			CR.ID
			, CR.LEARN_APP_ID
			, CR.CARDINAL_ID
			, CR.COURSE_ID
			, CR.QUIZ_ID
			, CR.QUIZ_TYPE
			, CR.EXAM_NUM
			, CR.FILE_ID
			, CR.USER_FILE_ID
			, CR.MARK_YN
			, CR.ANSWER
			, CR.SCORE
			, CES.ID AS EXAM_SPOT_ID
			, CES.NAME AS SPOT_NAME
			, CES.SPOT
			, CES.POST_CODE
			, CES.ADDR1
			, CES.ADDR2
			, CES.TEL
			, CES.LIMIT_NUM
			, CES.APP_AREA
			, CES.TRAFFIC
			, IFNULL((SELECT URL_PATH FROM FF_ATTACH_FILE_DETAIL WHERE FILE_ID = CR.USER_FILE_ID LIMIT 1), '') AS USER_URL_PATH
			, IFNULL((SELECT URL_PATH FROM FF_ATTACH_FILE_DETAIL WHERE FILE_ID = CES.MAP_FILE LIMIT 1), '') AS MAP_URL_PATH
			FROM CB_REPORT AS CR
				LEFT JOIN CB_EXAM_SPOT AS CES ON CR.EXAM_SPOT_ID = CES.ID
			WHERE 1=1
			AND CR.LEARN_APP_ID = #{id}
			AND CR.USER_ID = #{user_id}
			AND CR.QUIZ_TYPE = #{quiz_type}
	</select>

	<!-- 첨삭지도 모사율 리스트 조회 -->
	<select id="selectCopyRatioList" resultType="hashmap">
		SELECT
			A.URI
			, A.CHECK_TYPE
			, A.TOTAL_COPY_RATIO
			, A.DISP_TOTAL_COPY_RATIO
			, A.COMPLETE_STATUS
			, A.COMPLETE_DATE
		FROM TB_COPYKILLER_COPYRATIO AS A
			JOIN VW_COPYKILLER AS B ON A.URI = B.URI
		WHERE B.TERM_ID = #{cardinal} /*CARDINAL*/
		 AND B.CLASS_ID = #{course} /*COURSE*/
		 AND B.STUDENT_ID = REPLACE(#{user_id}, '@', '-') /*USERID*/
		 AND B.REPORT_ID = #{ID} /*QUIZ*/
	</select>

	<!-- 대기연수 취소  -->
	<update id="updateCancelWaitingApp">
		UPDATE CB_LEARN_APP
			SET USE_YN = 'N'
					, UPD_USER = #{user_id}
					, UPD_DATE = NOW()
		WHERE
			ID = #{id}
			AND USER_ID = #{user_id}
			AND CARDINAL_ID = #{cardinal}
			AND COURSE_ID = #{course}
	</update>

</mapper>