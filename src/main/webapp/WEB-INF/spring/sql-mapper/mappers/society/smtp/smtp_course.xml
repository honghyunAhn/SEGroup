<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="global.segroup.society.smtp.dao.SmtpCourseDao">


	<!-- 대분류 리스트에서 과정에 맞는 중, 소분류를 출력 -->
	<!-- 대분류 리스트에 대한 정보가 view에 없기 때문에, 외국어, it 등의 대분류의 seq를 바탕으로 검색 -->
	<select id="selectCourseList" resultType="hashmap">
	
	SELECT GRAND.NAME AS grand, PARENT.NAME AS parent, SON.NAME AS son FROM
	(SELECT * FROM FF_CODE WHERE GROUP_ID='CATEGORYSEQUENCE') GRAND,
	(SELECT * FROM FF_CODE WHERE GROUP_ID='CATEGORYSEQUENCE') PARENT,
	(SELECT * FROM FF_CODE WHERE GROUP_ID='CATEGORYSEQUENCE') SON
	WHERE
	GRAND.CODE = PARENT.PARENT_CODE 
	AND PARENT.USE_YN = 'Y' 
	AND SON.USE_YN = 'Y'
	AND PARENT.CODE = SON.PARENT_CODE	
	
	</select>

	<!-- 과정분류에 맞는 과정목록을 출력 -->
	<select id="selectCourseBoardList" parameterType="hashmap" resultType="hashmap" useCache="false">
	/*::::selectCourseList::::*/
		select
			a.seq ,			a.id as course_id,	a.course_code ,		a.target_types ,	a.teach_id,
			a.name ,		a.main_yn ,			a.main_display ,	a.icon_displays ,	a.complete_time ,
			a.learn_types ,	a.credit ,			a.learn_target ,	a.price ,			a.prog_check ,
			a.open_date ,	a.app_date ,		a.recruit ,			a.exam_period ,		a.main_tb_id ,
			a.sub_tb_id ,	a.main_price ,		a.sub_price ,		a.link_server ,		a.group_yn ,
			a.mobile_yn ,	a.index_url ,		a.tasting_url ,		a.sample_url ,		a.selp_period ,
			a.dup_dis_yn ,	a.accept_yn ,		a.purpose ,			a.summary ,			a.instructor ,
			DATE_FORMAT(a.reg_date, "%Y.%c.%e %T") as reg_date,
			DATE_FORMAT(a.upd_date, "%Y.%c.%e %T") as reg_date,
			a.credit*15 as credit_time,
			(
				SELECT name FROM FF_MEMBER WHERE ID = a.teach_id AND use_yn = 'Y'
             ) AS teacher_name,
             (
             	SELECT NAME FROM CB_BOOK WHERE ID = a.main_tb_id
             ) AS main_tb_name,
             (
			 	SELECT URL_PATH FROM FF_ATTACH_FILE_DETAIL WHERE FILE_ID = a.MAIN_IMG_FILE LIMIT 1
			 ) AS photo_url
		from CB_COURSE a
		where 1=1
		and a.use_yn = 'Y'
		and a.course_code like '%CATESEQ%'

 		and a.course_code in 
		(select code from FF_CODE where use_yn = 'y' and parent_code in
		(select code from FF_CODE where use_yn = 'y' and parent_code = 
		(select code from FF_CODE where parent_code is null and name=#{grand})
		)
		)	
		<include refid="sql_selectCourseList"/>
 		<choose>
			<when test='main_recommend_order != null and main_recommend_order != ""'>
				ORDER BY a.reg_date DESC
			</when>
			<otherwise>
				ORDER BY a.name ASC
			</otherwise>
		</choose>
<!-- 		<choose>
			<when test='sort == null or sort == "" or sort == "H"'>
		 ORDER BY HITS_ORDER
			</when>
			<when test='sort == "S"'>
		 ORDER BY SELL_ORDER
			</when>
			<otherwise>
		 ORDER BY REG_DATE DESC
			</otherwise>
		</choose>
 -->
		limit ${startPage}, ${visiblePages}

	</select>
<!-- 		order by a.reg_date desc
	limit ${startPage}, ${visiblePages}
 -->
	
	<select id="selectCourseDetail" parameterType="string" resultType="hashmap">

		SELECT
		a.seq, a.id, a.course_code, a.com_id, a.com_cal, a.teach_id, a.teach_cal, a.tutor_cal, a.tb_code, 
		a.name, a.short_name, a.main_yn, a.main_display, a.icon_displays, a.complete_time, a.learn_types, 
		a.target_types, a.credit, a.learn_target, a.price, a.prog_check, a.open_date, a.app_date, a.recruit, 
		a.exam_period, a.main_tb_id, a.sub_tb_id, a.main_price, a.sub_price, a.link_server, a.group_yn, a.mobile_yn, 
		a.index_url, a.tasting_url, a.sample_url, a.width, a.height, a.selp_period, a.main_img_file, a.dup_dis_yn, 
		a.accept_yn, a.purpose, a.summary, a.instructor, a.note, a.mobile_summary, a.developer, a.res_tel, a.com_name, 
		a.com_tel, a.produce_date, a.storage_loc, a.history, a.remarks, a.order_num, a.sell_order, a.hits_order, a.use_yn, 
		a.reg_user, a.reg_date, a.upd_user, a.upd_date,
		(
		SELECT URL_PATH FROM FF_ATTACH_FILE_DETAIL WHERE FILE_ID = a.MAIN_IMG_FILE LIMIT 1
		) AS photo_url,
		a.comp_percent_quiz, a.comp_percent_exam, a.comp_percent_prog, a.comp_score_quiz, a.comp_score_exam, a.comp_score_prog, a.complete_total

		FROM
		CB_COURSE a
		
		WHERE
		id = #{course_id}
	</select>

	<sql id="sql_selectCourseList">
		<!-- 중분류 탭 선택시 중분류에 해당하는 과정리스트만 출력하는 옵션 -->
		<if test='parent_category_opt != null and parent_category_opt != ""'>
		and a.course_code in 		
		(select code from FF_CODE where parent_code =
		(select code from FF_CODE where name = #{parent_category_opt} and parent_code= 
		(select code from FF_CODE where parent_code is null and name= #{grand})		
		)
		)	
		</if>

		<if test='main_recommend != null and main_recommend != ""'>
		and a.icon_displays like CONCAT('%',#{main_recommend},'%')
		</if>
		
		<!-- 소분류 탭 선택시 소분류에 해당하는 과정리스트만 출력하는 옵션 -->
		<if test='category_opt != null and category_opt != ""'>
		and a.course_code = (select code from FF_CODE where name = #{category_opt})	
		</if>

		<!-- 과정관련 검색 조건 중 아이콘필터에 따른 검색조건만 선택 -->
		<if test='display_icons_1 != null and display_icons_1 != ""'>
		and a.icon_displays like CONCAT('%',#{display_icons_1},'%')
		</if>
		<if test='display_icons_2 != null and display_icons_2 != ""'>
		and a.icon_displays like CONCAT('%',#{display_icons_2},'%')
		</if>
		<if test='display_icons_3 != null and display_icons_3 != ""'>
		and a.icon_displays like CONCAT('%',#{display_icons_3},'%')
		</if>
		<if test='display_icons_4 != null and display_icons_4 != ""'>
		and a.icon_displays like CONCAT('%',#{display_icons_4},'%')
		</if>
		<if test='display_icons_5 != null and display_icons_5 != ""'>
		and a.icon_displays like CONCAT('%',#{display_icons_5},'%')
		</if>
		<if test='learn_types != "" and learn_types != null'>
		and a.learn_types like CONCAT('%',#{learn_types},'%')
		</if>
		<if test='course_code != "0" and course_code != null'>
		and a.course_code = #{course_code}
		</if>
		<if test='credit != "0" and credit != null'>
		and a.credit = #{credit}
		</if>
		<if test='target_types != "0" and target_types != null'>
		and a.target_types like CONCAT('%',#{target_types},'%')
		</if>
		<if test='search != null and search != ""'>
				AND (
					a.name LIKE CONCAT('%', #{search} ,'%')
					OR a.summary LIKE CONCAT('%', #{search} ,'%')
					OR (
						a.teach_id IS NOT NULL
						AND EXISTS (
							SELECT 1
							  FROM FF_MEMBER
							 WHERE grade = 2
							   AND id = a.teach_id
							   AND name LIKE CONCAT('%', #{search} ,'%')
						)
					)
				)
		</if>
		and a.accept_yn = 'Y'
		and a.use_yn = 'Y'
	</sql>

	<select id="selectCourseListTotCnt" parameterType="hashmap" resultType="int" useCache="false">
		/*::::selectCourseListTotCnt::::*/
		select
			count(a.seq) as cnt
		from CB_COURSE a
		where 1=1
		and a.use_yn = 'Y'
		and a.course_code like '%CATESEQ%'

 		and a.course_code in 
		(select code from FF_CODE where use_yn = 'y' and parent_code in
		(select code from FF_CODE where use_yn = 'y' and parent_code = 
		(select code from FF_CODE where parent_code is null and name=#{grand})
		)
		)	
		<include refid="sql_selectCourseList"/>
	</select>

	<select id="getUserInfo" parameterType="string" resultType="hashmap">
      SELECT a.user_id, a.user_pw, a.user_nm, a.user_phone, a.user_email, a.user_birth, a.user_sex, b.user_belong_to, b.user_tel, b.user_zipcode, b.user_addr1, b.user_addr2
		  FROM COM_USER_TB AS a
		  	LEFT OUTER JOIN CB_USER_INFO AS b
		  	ON a.USER_ID = b.USER_ID 
		 WHERE a.USER_ID = #{user_id}
		   AND a.USER_STATE = 'A0200'
    </select>

	<!-- 과정에 매칭된 기수가 존재하는지 브릿지 테이블에서 확인하는 쿼리 -->
	<select id="checkCardinalMatched" parameterType="hashmap" resultType="hashmap">
		
		SELECT course_id, cardinal_id
		FROM CB_CN_COURSE
		WHERE
		COURSE_ID = #{id}	

	</select>
	
	<!-- 기수 접수 시작일을 기준으로 기수가 존재하는지 안하는지 확인 -->
<!-- 	<select id="checkValidCardinalExist" parameterType="hashmap" resultType="int">
	
		SELECT COUNT(ID)
		FROM CB_CARDINAL
		WHERE
		ID = #{cardinal_id}
		and LEARN_START_DATE = #{learnStartDate}

	</select>
 -->	
<!-- 	<select id="selectCardinalId" parameterType="hashmap" resultType="string">

		SELECT 
		id
		FROM CB_CARDINAL
		WHERE
		ID = #{cardinal_id}
		and LEARN_START_DATE = #{learnStartDate}

	</select>
 -->
	<select id="selectCardinalList" parameterType="hashmap" resultType="hashmap">

		SELECT 
		seq, id, name, learn_type, credits, course_type, app_start_date, app_end_date, 
		learn_start_date, learn_end_date, issue_date, att_eval_date, att_eval_time, 
		att_exam_type, cancel, dup_limit, add_exam_period, open_results, app_possibles, 
		expect_exam, preview, complate_yn, order_num, use_yn, reg_user, reg_date, upd_user, upd_date
		, comp_percent_quiz, comp_percent_exam, comp_percent_prog, comp_score_quiz, comp_score_exam, comp_score_prog, complete_total
		FROM CB_CARDINAL
		WHERE
		ID = #{cardinal_id}
		<if test="today != null">
		and STR_TO_DATE(#{today}, '%Y-%m-%d') BETWEEN STR_TO_DATE(app_start_date, '%Y-%m-%d') AND STR_TO_DATE(app_end_date, '%Y-%m-%d')
		</if>
	</select>

	<insert id="insertCardinal" parameterType="hashmap">
	    
		INSERT INTO CB_CARDINAL
			( ID, NAME, LEARN_TYPE, CREDITS, COURSE_TYPE, APP_START_DATE, APP_END_DATE, LEARN_START_DATE, LEARN_END_DATE
			, ISSUE_DATE, ATT_EVAL_DATE, ATT_EVAL_TIME, ATT_EXAM_TYPE, CANCEL, DUP_LIMIT, ADD_EXAM_PERIOD
			, OPEN_RESULTS, APP_POSSIBLES, EXPECT_EXAM, PREVIEW, COMPLATE_YN
			, ORDER_NUM, USE_YN, REG_DATE, UPD_DATE
			, COMP_PERCENT_QUIZ, COMP_PERCENT_EXAM, COMP_PERCENT_PROG, COMP_SCORE_QUIZ, COMP_SCORE_EXAM, COMP_SCORE_PROG, COMPLETE_TOTAL )
		VALUES
			( #{id}, #{name}, #{learn_type}, #{credits}, #{course_type}, #{appStartDate}, #{appEndDate}, #{learnStartDate}, #{learnEndDate}
			, #{issue_date}, #{att_eval_date}, #{att_eval_time}, #{att_exam_type}, #{cancel}, #{dup_limit}, #{add_exam_period}
			, #{openResults}, #{appPossibles}, #{expectExam}, #{preview}, #{complateYn}
			, #{order_num}, #{use_yn}, DATE_FORMAT(NOW(),'%Y%m%d%H%i%s'), DATE_FORMAT(NOW(),'%Y%m%d%H%i%s')
			, #{compPercentQuiz}, #{compPercentExam}, #{compPercentProg}, #{compScoreQuiz}, #{compScoreExam}, #{compScoreProg}, #{completeTotal} )
	</insert>
	
	<insert id="insertCardinalCourseInfo" parameterType="hashmap">
		INSERT INTO CB_CN_COURSE(
		CARDINAL_ID,
		COURSE_ID
		) VALUES (
		#{cardinal_id},
		#{course_id}
		)
	</insert>
	
	<select id="selectMaxCardinalSeq" resultType="Integer">
	
		SELECT MAX(SEQ)
		FROM
		CB_CARDINAL
		
	</select>

	<!--  
	<insert id="insertApply" parameterType="map" useGeneratedKeys="true" keyProperty="id">
		insert into CB_LEARN_APP
		(user_id, group_id, cardinal_id, course_id, neis_num, des_num, school_name
		, tel, phone, email, region_code, jurisdiction, s_type, e_type, post_type
		, order_idx, payment_type, payment_state, payment_date
		, app_num, coupon_num, dis_coupon, dis_point, dis_group, payment, real_payment
		, reg_user, upd_user)
		values
		(#{user_id}
		<choose>
		<when test='group_id == ""'>, null</when>
		<otherwise>, #{group_id}</otherwise>
		</choose>
		, #{cardinal_id}, #{course_id}, #{neis_num}, #{des_num}, #{school_name}
		, #{tel}, #{phone}, #{email}, #{region_code}, #{jurisdiction}, #{s_type}, #{e_type}, #{post_type}
		, #{order_idx}, #{payment_type}, #{payment_state}
		<choose>
		<when test='payment_state == "1"'>, null</when>
		<otherwise>, DATE_FORMAT(NOW(),'%Y%m%d%H%i%s')</otherwise>
		</choose>
		, #{app_num}, #{coupon_num}, #{dis_coupon}, #{dis_point}, #{dis_group}, #{payment}, #{real_payment}
		, #{user_id}, #{user_id})
	</insert>
	-->
	
	<!-- 수강신청, 복습기간 설정 -->
	<insert id="insertApply" parameterType="map" useGeneratedKeys="true" keyProperty="id">
		insert into CB_LEARN_APP
		(user_id, group_id, cardinal_id, course_id, neis_num, des_num, school_name
		, tel, phone, email, region_code, jurisdiction, s_type, e_type, post_type
		, order_idx, payment_type, payment_state, payment_date
		, app_num, coupon_num, dis_coupon, dis_point, dis_group, payment, real_payment
		, reg_user, upd_user 
		, real_end_date )		
		SELECT #{user_id}
		<choose>
		<when test='group_id == ""'>, null</when>
		<otherwise>, #{group_id}</otherwise>
		</choose>
		, #{cardinal_id}, #{course_id}, #{neis_num}, #{des_num}, #{school_name}
		, #{tel}, #{phone}, #{email}, #{region_code}, #{jurisdiction}, #{s_type}, #{e_type}, #{post_type}
		, #{order_idx}, #{payment_type}, #{payment_state}
		<choose>
		<when test='payment_state == "1"'>, null</when>
		<otherwise>, DATE_FORMAT(NOW(),'%Y%m%d%H%i%s')</otherwise>
		</choose>
		, #{app_num}, #{coupon_num}, #{dis_coupon}, #{dis_point}, #{dis_group}, #{payment}, #{real_payment}
		, #{user_id}, #{user_id}
		, DATE_ADD(C.LEARN_END_DATE, INTERVAL C.REVIEW_PERIOD DAY)
		FROM (
			SELECT A.LEARN_END_DATE, B.REVIEW_PERIOD 
			FROM CB_CN_COURSE CN
				INNER JOIN CB_CARDINAL A ON CN.CARDINAL_ID = A.ID
    			INNER JOIN CB_COURSE B ON CN.COURSE_ID = B.ID
    		WHERE CARDINAL_ID = #{cardinal_id}
		) C
	</insert>

	<select id="selectCourseChapterListAll" parameterType="string" resultType="hashmap" useCache="false">
		SELECT name, study, teacher
			 , CONCAT(LPAD(ROUND(STUDY/60), 2, '0'), '분 ', LPAD(STUDY%60, 2, '0'), '초') AS study2
		  FROM CB_CHAPTER
		 WHERE COURSE_ID = #{course_id}
		 ORDER BY ORDER_NUM
	</select>

	<select id="selectSearchCourseList" parameterType="hashmap" resultType="hashmap" useCache="false">
		select
			a.seq ,			a.id as course_id,	a.course_code ,		a.target_types ,	a.teach_id,
			a.name ,		a.main_yn ,			a.main_display ,	a.icon_displays ,	a.complete_time ,
			a.learn_types ,	a.credit ,			a.learn_target ,	a.price ,			a.prog_check ,
			a.open_date ,	a.app_date ,		a.recruit ,			a.exam_period ,		a.main_tb_id ,
			a.sub_tb_id ,	a.main_price ,		a.sub_price ,		a.link_server ,		a.group_yn ,
			a.mobile_yn ,	a.index_url ,		a.tasting_url ,		a.sample_url ,		a.selp_period ,
			a.dup_dis_yn ,	a.accept_yn ,		a.purpose ,			a.summary ,			a.instructor ,
			DATE_FORMAT(a.reg_date, "%Y.%c.%e %T") as reg_date,
			DATE_FORMAT(a.upd_date, "%Y.%c.%e %T") as reg_date,
			a.credit*15 as credit_time,
			(
				SELECT name FROM FF_MEMBER WHERE ID = a.teach_id AND use_yn = 'Y'
             ) AS teacher_name,
             (
             	SELECT NAME FROM CB_BOOK WHERE ID = a.main_tb_id
             ) AS main_tb_name,
             (
			 	SELECT URL_PATH FROM FF_ATTACH_FILE_DETAIL WHERE FILE_ID = a.MAIN_IMG_FILE LIMIT 1
			 ) AS photo_url,
			 (
				SELECT NAME FROM FF_CODE WHERE CODE = 
				(
					SELECT PARENT_CODE FROM FF_CODE WHERE CODE = (
						SELECT PARENT_CODE FROM FF_CODE WHERE CODE = a.COURSE_CODE 
					)
				)
				<!-- smtp의 과목만 검색되도록 함 -->
				and name not in('직무역량','ICT','외국어','자격증')
			 ) AS grand_name
		from CB_COURSE a
		where a.name LIKE CONCAT('%', #{keyWord} ,'%')
		and a.use_yn = 'Y'

		<include refid="sql_searchCourseList"/>

		order by reg_date desc
		limit ${startPage}, ${visiblePages}

	</select>

	<select id="searchCourseListTotCnt" parameterType="hashmap" resultType="int" useCache="false">
		select
			count(a.seq) as cnt
		from CB_COURSE a
		where 1=1
		and a.use_yn = 'Y'
		and a.name LIKE CONCAT('%', #{keyWord} ,'%')
		<include refid="sql_searchCourseList"/>
		
	</select>

		<sql id="sql_searchCourseList">
		<if test='grand != null and grand != ""'>
 		and a.course_code in 
		(select code from FF_CODE where use_yn = 'y' and parent_code in
		(select code from FF_CODE where use_yn = 'y' and parent_code = 
		(select code from FF_CODE where parent_code is null and name=#{grand})
		)
		)	
		</if>		

		<!-- 과정관련 검색 조건 중 아이콘필터에 따른 검색조건만 선택 -->
		<if test='display_icons_1 != null and display_icons_1 != ""'>
		and a.icon_displays like CONCAT('%',#{display_icons_1},'%')
		</if>
		<if test='display_icons_2 != null and display_icons_2 != ""'>
		and a.icon_displays like CONCAT('%',#{display_icons_2},'%')
		</if>
		<if test='display_icons_3 != null and display_icons_3 != ""'>
		and a.icon_displays like CONCAT('%',#{display_icons_3},'%')
		</if>
		<if test='display_icons_4 != null and display_icons_4 != ""'>
		and a.icon_displays like CONCAT('%',#{display_icons_4},'%')
		</if>
		<if test='display_icons_5 != null and display_icons_5 != ""'>
		and a.icon_displays like CONCAT('%',#{display_icons_5},'%')
		</if>
		
		<if test='free_lecture == "on"'>
		and a.price = 0
		</if>
		</sql>

		<!-- user_id, course_id, cardinal_id를 받아서 cb_learn_app의 시퀀스(id)를 가져온다. -->
		<select id="selectLearnAppId" parameterType="hashmap" resultType="int">

		select 
		id
		
		from 
		cb_learn_app
		
		where
		user_id = #{user_id}
		and course_id = #{course_id}
		and cardinal_id = #{cardinal_id}
		</select>

		<select id="selectEnrolledListCnt" parameterType="hashmap" resultType="int">

		SELECT
		count(id)
		
		FROM
		CB_LEARN_APP
		
		WHERE
		USER_ID = #{user_id}
		and COURSE_ID = #{course_id}
		and CARDINAL_ID = #{cardinal_id}

		</select>

		<select id="selectCbCnCardinalCnt" parameterType="hashmap" resultType="int">

		SELECT
		count(SEQ)
		
		FROM
		CB_CN_COURSE
		
		WHERE
		COURSE_ID = #{id}

		</select>
		
	<!-- CB_LEARN_CANCEL_APP의 취소신청 정보 저장 -->
	<insert id="insertLearnCancelApp" parameterType="hashmap">
		INSERT INTO CB_LEARN_CANCEL_APP (
			USER_ID, LEARN_APP_ID
			, TEL, PHONE, EMAIL
			, BOOK_TYPE, MEMO
			, BANK, ACCOUNT, OWNER
			, REG_USER, REG_DATE
			, UPD_USER, UPD_DATE
		)
		VALUES (
			#{user_id}, #{learnAppId}
			, #{tel}, #{phone}, #{email}
			, #{bookReturn}, #{memo}
			, #{bank}, #{account}, #{owner}
			, #{user_id}, NOW()
			, #{user_id}, NOW()
		)
	</insert>		
		
	<update id="changeLearnPaymentState" parameterType="String">	
	
	UPDATE
	CB_LEARN_APP
	
	SET
	PAYMENT_STATE = '5'
	
	WHERE
	ID = #{id}
	
	</update>	

	<select id="selectLearnCancelInfo" parameterType="hashmap" resultType="hashmap">

		SELECT
		ID, USER_ID, LEARN_APP_ID, TEL, EMAIL, BOOK_TYPE, BANK, ACCOUNT, OWNER, MEMO, STATE, USE_YN,
		REG_USER, REG_DATE, UPD_USER, UPD_DATE
	
		FROM CB_LEARN_CANCEL_APP
	
		WHERE
		USER_ID = #{user_id}
		AND LEARN_APP_ID = #{learn_app_id}

	</select>

	<update id="updateLearnCancelInfo">

		UPDATE
		CB_LEARN_CANCEL_APP
		
		SET
		BANK = #{bank}
		,ACCOUNT = #{account}
		,OWNER = #{owner}
		,UPD_DATE = NOW()	
	
		WHERE
		USER_ID = #{user_id}
		AND LEARN_APP_ID = #{learn_app_id}
		
	</update>	

	<delete id="deleteRefundInfo" parameterType="string">

		DELETE FROM
		CB_LEARN_CANCEL_APP
		
		WHERE
		LEARN_APP_ID = #{learn_id}
		
	</delete>	

	<update id="updateLearnAppState" parameterType="string">

		UPDATE
		CB_LEARN_APP
		
		SET
		PAYMENT_STATE = '2'
	
		WHERE
		ID = #{learn_id}
		
	</update>	
	
	<!-- 회원정보수정-->
	<update id="updateUserInfo" parameterType="hashmap">
		UPDATE COM_USER_TB AS A
			LEFT OUTER JOIN CB_USER_INFO AS B
			ON A.USER_ID = B.USER_ID
		SET A.USER_EMAIL = #{email}
		    , A.USER_PHONE = #{phone}
		    , A.USER_UDT_ID = #{user_id}				 
			, A.USER_UDT_DT = now()		
		WHERE A.USER_ID = #{user_id}
		AND A.USER_STATE = 'A0200'
	</update> 
	
	<!-- 회원정보 수정(선택) 2-1  -->
 	<update id="updateAdditionalUserInfo"  parameterType="hashmap">
 		UPDATE 
 			     CB_USER_INFO
 			 SET 
 			 	 USER_BELONG_TO = #{belong_to}				
				, USER_ZIPCODE =  #{post_code}
				, USER_ADDR1 = #{addr1}
				, USER_ADDR2 = #{addr2}
				, USER_UDT_ID = #{user_id}
				, USER_UDT_DT = now()
		WHERE USER_ID = #{user_id}
 	</update>

 	<!-- 회원정보 수정(선택) 2-2 -->	
	<insert id="insertAdditionalUserInfo"  parameterType="hashmap">
			INSERT INTO 
				 CB_USER_INFO
						(	USER_ID
						, USER_BELONG_TO
						, USER_ZIPCODE
			            , USER_ADDR1
			            , USER_ADDR2
			            , USER_UDT_ID
			            , USER_UDT_DT 
					)VALUES(
					     #{user_id}
					    , #{belong_to}
						, #{post_code}
						, #{addr1}
						, #{addr2}
						, #{user_id}
						, now()		        
					)			 
	</insert>
		
<!-- 		<select id="searchCoursePage" parameterType="String" resultType="String">

		SELECT NAME FROM FF_CODE WHERE CODE = 
		(
			SELECT PARENT_CODE FROM FF_CODE WHERE CODE = 
			(
				SELECT PARENT_CODE FROM FF_CODE WHERE CODE = 
				(
					SELECT COURSE_CODE FROM CB_COURSE WHERE ID = #{course_id}
				)
			)
		)
		</select> -->
	
</mapper>